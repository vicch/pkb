#+setupfile: ../../styles/readtheorg.setup
#+title: Object-Oriented Programming

* Definition

- Object :: A packet of information stored in a chunk of computer memory. \\

Every object is associated with a data type, and the data type determines what can be done to an object. \\
All programming languages have *built-in data types*, such as the integer data type and the character data type.

** Composition vs Inheritance

#+attr_html: :class no-border
| *Composition* | Composition is a =has-a= relationship.                                                         |
|               | Used to package code into modules that are used in different, unrelated places and situations. |
|---------------+------------------------------------------------------------------------------------------------|
| *Inheritance* | Inheritance is a =is-a= relationship.                                                          |
|               | Used when there are related reusable pieces of code that fit under a single common concept.    |

* Principle

#+attr_html: :class no-border
| *Explicit-representation* | Whenever there is a natural category that the program needs to work with,      |
|                           | there should be a class that corresponds to that category.                     |
|---------------------------+--------------------------------------------------------------------------------|
| *No-duplication*          | Member variables and function definitions should be distributed among class    |
|                           | definitions to ensure that there is no duplication of identical code.          |
|---------------------------+--------------------------------------------------------------------------------|
| *Local-view*              | Related program elements should be located close to one another on the screen, |
|                           | so that one can see at a glance how those program elements work together.      |
|---------------------------+--------------------------------------------------------------------------------|
| *Look-it-up*              | A program should look up a frequently needed answer, rather than computing     |
|                           | that answer, whenever practicable.                                             |
|---------------------------+--------------------------------------------------------------------------------|
| *Need-to-know*            | By restricting access to classes to the member variables and functions in      |
|                           | public interface, one can revise and improve the other member variables and    |
|                           | functions without worrying about whether other programmers have come to depend |
|                           | on member variables that disappear or functions whose behavior changes.        |
|---------------------------+--------------------------------------------------------------------------------|
| *Keep-it-simple*          | In general, programs with complex program elements are difficult to write,     |
|                           | to debug, to improve, and to maintain. When a function becomes too complex to  |
|                           | understand easily, it should be broke up into smaller functions that can be    |
|                           | debugged and maintained independently.                                         |
           
* Quote

#+begin_quote
OOP 的本质就是对数据和与之关联的行为进行编程。OOP 注重的是：1）数据和其行为的打包封装，2）程序的接口和实现的解耦。（[[http://coolshell.cn/articles/8745.html][如此理解面向对象编程]]）
#+end_quote

#+begin_quote
OOD 的两大准则：1）钟情于组合而不是继承，2）依赖于接口而不是实现。（[[http://coolshell.cn/articles/8961.html][从面向对象的设计模式看软件设计]]）
#+end_quote

#+begin_quote
The shift from procedural to OO brings with it a shift from thinking about problems and solutions to thinking about architecture. The latter is almost always longer, full of extra interface and indentation and annotations. The temptation is to start moving trivial bits of code into classes and adding all these little methods and anticipating methods that aren't needed yet but might be someday. ([[http://prog21.dadgum.com/93.html][Don't Distract New Programmers with OOP]])
#+end_quote
