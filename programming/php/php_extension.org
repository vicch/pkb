#+SETUPFILE: ../../styles/readtheorg.setup
#+TITLE: PHP Extension

* PEAR & PECL

- PEAR :: PHP Extension and Application Repository \\
          PHP 代码仓库，提供一个结构化的代码库，用来分发和管理代码包，并提倡统一的编程风格。

- PECL :: PHP Extension Community Library \\
          从 PEAR 中分支并独立出来的 PHP 代码仓库。

** PEAR 命令行

#+begin_src sh
pear channel-discover
pear install
pear upgrade
pear uninstall
#+end_src

* bcompiler

Normal PHP execution
- PHP interpreter
  + parses script code
  + compiles the code into Zend Opcodes (machine-code instructions)
  + executes the bytecode
- happens for each PHP file during every request, overhead is huge

Bytecode cache
- stores precompiled PHP bytecode
- PHP interpreter
  + reads the precompiled bytecode from memory
  + executes the bytecode
- reduces application response times and stress on system resources

Bytecode cache extension
- Alternative PHP Cache (APC)
- eAccelerator
- ionCube
- XCache

* Date/Time
** =DateTime=

#+CAPTION: 示例
#+begin_src php
$datetime = new DateTime(); // 默认为当前日期、时间
$datetime = new DateTime('2014-04-27 5:03 AM');
$datetime = DateTime::createFromFormat('M j, Y H:i:s', 'Jan 2, 2014 23:04:12');
#+end_src

** =DateInterval=

用于修改 =DateTime= 实例。

时间长度为绝对（e.g. "2 days"）或相对（e.g. "yesterday"）。

#+CAPTION: 时间长度语法
#+begin_src sh
P<n><unit>...[T<n><unit>...]
    P      # Period
    T      # 分隔「年月周日」与「时分秒」
    <unit> # Y, M, W, D, H, M, S
#+end_src

#+CAPTION: 时间长度示例
#+begin_src sh
P2D      # 2 天
P2DT5H2M # 2 天 5 小时 2 分
#+end_src

#+CAPTION: 示例
#+begin_src php
$datetime = new DateTime('2014-01-01 14:00:00');
$interval = new DateInterval('P2W');
$interval = \DateInterval::createFromDateString('-1 day');
$datetime->add($interval);
#+end_src

** =DateTimezone=

建议用法
- 设置服务器时区和 PHP 默认时区为 UTC，代码和存储始终使用 UTC 时区。
- 显示时将 UTC 时区时间转换为需要的时区时间。

#+CAPTION: 示例
#+begin_src php
$timezone = new DateTimeZone('America/New_York');
$datetime = new DateTime('2014-08-20', $timezone);
$datetime->setTimezone(new DateTimeZone('Asia/Hong_Kong'));
#+end_src

** =DatePeriod=

指定间隔的日期时间序列。实例是迭代器，每个元素是一个 =DateTime= 实例。

#+CAPTION: 示例
#+begin_src php
$start = new DateTime();
$interval = new DateInterval('P2W');
$period = new DatePeriod($start, $interval, 3);
foreach ($period as $nextDateTime) {
    echo $nextDateTime->format('Y-m-d H:i:s'), PHP_EOL;
}
#+end_src

*** =__construct()=

#+begin_src php
DatePeriod::__construct (
    DateTimeInterface $start       // 开始时间
,   DateInterval      $interval    // 时间间隔
,   int               $recurrences // 重复次数
[,  int               $options
] )

DatePeriod::__construct (
    DateTimeInterface $start    // 开始事件
,   DateInterval      $interval // 时间间隔
,   DateTimeInterface $end      // 结束时间
[,  int               $options
] )
#+end_src

* Exception

| =getCode()=          |   |
|----------------------+---|
| =getFile()=          |   |
|----------------------+---|
| =getLine()=          |   |
|----------------------+---|
| =getMessage()=       |   |
|----------------------+---|
| =getTrace()=         |   |
|----------------------+---|
| =getTraceAsString()= |   |

* Filter

| [[filter_var][=filter_var()=]]   | 使用指定 filter 过滤一个变量   |
|------------------+--------------------------------|
| [[filter_input][=filter_input()=]] | 获取指定名称的外部变量，并过滤 |

** 常量

| =FILTER_VALIDATE_BOOLEAN= |   |
|---------------------------+---|
| =FILTER_VALIDATE_EMAIL=   |   |
|---------------------------+---|
| =FILTER_VALIDATE_FLOAT=   |   |
|---------------------------+---|
| =FILTER_VALIDATE_INT=     |   |
|---------------------------+---|
| =FILTER_VALIDATE_IP=      |   |
|---------------------------+---|
| =FILTER_VALIDATE_MAC=     |   |
|---------------------------+---|
| =FILTER_VALIDATE_REGEXP=  |   |
|---------------------------+---|
| =FILTER_VALIDATE_URL=     |   | 

| =FILTER_SANITIZE_EMAIL=              |   |
|--------------------------------------+---|
| =FILTER_SANITIZE_ENCODED=            |   |
|--------------------------------------+---|
| =FILTER_SANITIZE_MAGIC_QUOTES=       |   |
|--------------------------------------+---|
| =FILTER_SANITIZE_NUMBER_FLOAT=       |   |
|--------------------------------------+---|
| =FILTER_SANITIZE_NUMBER_INT=         |   |
|--------------------------------------+---|
| =FILTER_SANITIZE_SPECIAL_CHARS=      |   |
|--------------------------------------+---|
| =FILTER_SANITIZE_FULL_SPECIAL_CHARS= |   |
|--------------------------------------+---|
| =FILTER_SANITIZE_STRING=             |   |
|--------------------------------------+---|
| =FILTER_SANITIZE_STRIPPED=           |   |
|--------------------------------------+---|
| =FILTER_SANITIZE_URL=                |   |
|--------------------------------------+---|
| =FILTER_UNSAFE_RAW=                  |   |

** =filter_var()=
<<filter_var>>

#+begin_src php
mixed filter_var (
    mixed $variable
[,  int   $filter = FILTER_DEFAULT
[,  mixed $options
]] )
#+end_src

| 返回值 | 输入数据 | 验证成功时 |
|        | =false=  | 验证失败时 |

#+CAPTION: 示例 1
#+begin_src php
<?php
$email = 'john@example.com';
$emailSafe = filter_var($email, FILTER_SANITIZE_EMAIL);
#+end_src

#+CAPTION: 示例 2
#+begin_src php
$input = 'john@example.com';
$isEmail = filter_var($input, FILTER_VALIDATE_EMAIL);
if ($isEmail !== false) {
    echo "Success";
} else {
    echo "Fail";
}
#+end_src

#+CAPTION: 示例 3
#+begin_src php
$string = "\nIñtërnâtiônàlizætiøn\t";
$safeString = filter_var(
    $string,
    FILTER_SANITIZE_STRING,
    FILTER_FLAG_STRIP_LOW|FILTER_FLAG_ENCODE_HIGH
);
#+end_src

** =filter_input()=
<<filter_input>>

#+begin_src php
mixed filter_input (
    int    $type
,   string $variable_name
[,  int    $filter = FILTER_DEFAULT
[,  mixed  $options
]] )
#+end_src

#+CAPTION: =$type=
| =INPUT_GET=    |   |
|----------------+---|
| =INPUT_POST=   |   |
|----------------+---|
| =INPUT_COOKIE= |   |
|----------------+---|
| =INPUT_SERVER= |   |
|----------------+---|
| =INPUT_ENV=    |   |

* Hash

| [[password_hash][=password_hash()=]]         |                                    |
|---------------------------+------------------------------------|
| [[password_needs_rehash][=password_needs_rehash()=]] | 检查 hash 是否符合指定的算法和选项 |
|---------------------------+------------------------------------|
| [[password_verify][=password_verify()=]]       | 密码验证                           |

** =password_hash()=
<<password_hash>>

#+begin_src php
string password_hash (
    string  $password
,   int     $algo
[,  array   $options
] )
#+end_src

| =$algo=    | =int=    | 算法                                |
|------------+----------+-------------------------------------|
| =$options= | =array=  | 算法选项                            |
|------------+----------+-------------------------------------|
| 返回值     | =string= | 使用的算法、cost、salt 也包含在其中 |
|            | =false=  |                                     |

#+CAPTION: =$algo=
| =PASSWORD_BCRYPT=  |                                  |
|--------------------+----------------------------------|
| =PASSWORD_DEFAULT= | PHP 5.5 此值为 =PASSWORD_BCRYPT= |

#+CAPTION: =$options=
| =salt= |                     |
|--------+---------------------|
| =cost= | bycrypt work factor |

** =password_needs_rehash()=
<<password_needs_rehash>>

用于确保 hash 使用最新的算法、选项。

#+begin_src php
boolean password_needs_rehash (
    string  $hash
,   integer $algo
[,  array   $options
] )
#+end_src

** =password_verify()=
<<password_verify>>

#+begin_src php
boolean password_verify (
    string $password
,   string $hash
)
#+end_src

** 注册、登录示例
*** =register.php=

#+begin_src php
<?php
try {
    // Validate email
    $email = filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);
    if (!$email) {
        throw new Exception('Invalid email');
    }

    // Validate password
    $password = filter_input(INPUT_POST, 'password');
    if (!$password || mb_strlen($password) < 8) {
        throw new Exception('Password must contain 8+ characters');
    }

    // Create password hash
    $passwordHash = password_hash(
        $password,
        PASSWORD_DEFAULT,
        ['cost' => 12]
    );
    if ($passwordHash === false) {
        throw new Exception('Password hash failed');
    }

    // Create user account (THIS IS PSUEDO-CODE)
    $user = new User();
    $user->email = $email;
    $user->password_hash = $passwordHash;
    $user->save();

    // Redirect to login page
    header('HTTP/1.1 302 Redirect');
    header('Location: /login.php');
    
} catch (Exception $e) {
    // Report error
    header('HTTP/1.1 400 Bad request');
    echo $e->getMessage();
}
#+end_src

*** =login.php=

#+begin_src php
<?php
session_start();
try {
    // Get email address from request body
    $email = filter_input(INPUT_POST, 'email');

    // Get password from request body
    $password = filter_input(INPUT_POST, 'password');

    // Find account with email address (THIS IS PSUEDO-CODE)
    $user = User::findByEmail($email);

    // Verify password with account password hash
    if (password_verify($password, $user->password_hash) === false) {
        throw new Exception('Invalid password');
    }

    // Re-hash password if necessary (see note below)
    $currentHashAlgorithm = PASSWORD_DEFAULT;
    $currentHashOptions = array('cost' => 15);
    $passwordNeedsRehash = password_needs_rehash(
        $user->password_hash,
        $currentHashAlgorithm,
        $currentHashOptions
    );
    if ($passwordNeedsRehash === true) {
        // Save new password hash (THIS IS PSUEDO-CODE)
        $user->password_hash = password_hash(
            $password,
            $currentHashAlgorithm,
            $currentHashOptions
        );
        $user->save();
    }

    // Save login status to session
    $_SESSION['user_logged_in'] = 'yes';
    $_SESSION['user_email'] = $email;

    // Redirect to profile page
    header('HTTP/1.1 302 Redirect');
    header('Location: /user-profile.php');

} catch (Exception $e) {
    header('HTTP/1.1 401 Unauthorized');
    echo $e->getMessage();
}
#+end_src

* JSON
** =json_decode()=

#+begin_src php
mixed json_decode (
    string $json
[,  bool   $assoc = false
[,  int    $depth = 512
[,  int    $options = 0
]]] )
#+end_src

| =$json=  |                                                                         |
|----------+-------------------------------------------------------------------------|
| =$assoc= | when =true=, returned objects will be converted into associative arrays |
|----------+-------------------------------------------------------------------------|
| =$depth= | recursion depth                                                                        |

** =json_encode()=

#+begin_src php
string json_encode (
    mixed $value
[,  int   $options = 0
[,  int   $depth = 512
]] )
#+end_src

#+CAPTION: 示例
#+begin_src php
function ajaxAction()
{
    $response = array(
        'result'  => 'error',
        'message' => '...',
    );
    echo json_encode($response);
    exit;
}
#+end_src

* Multibyte
** Encoding

| =mb_check_encoding()=    | 检查字符串对于指定的编码是否有效 |
|--------------------------+----------------------------------|
| =mb_convert_encoding()=  | 转换字符串编码                   |
|--------------------------+----------------------------------|
| =mb_detect_encoding()=   | 检查字符串编码                   |
|--------------------------+----------------------------------|
| =mb_internal_encoding()= | 读取、设置内部字符编码           |

*** =mb_check_encoding()=

#+begin_src php
bool mb_check_encoding (
[   string $var = null
[,  string $encoding = mb_internal_encoding()
]] )
#+end_src

*** =mb_convert_encoding()=

#+begin_src php
string mb_convert_encoding (
    string $str
,   string $to_encoding
[,  mixed  $from_encoding = mb_internal_encoding()
] )
#+end_src

*** =mb_detect_encoding()=

#+begin_src php
string mb_detect_encoding (
    string $str
[,  mixed  $encoding_list = mb_detect_order()
[,  bool   $strict = false
]] )
#+end_src

*** =mb_internal_encoding()=

#+begin_src php
mixed mb_internal_encoding ( [ string $encoding = mb_internal_encoding() ] )
#+end_src

| 返回值 | =string= | =$encoding= 为空时，返回当前字符编码 |
|        | =true=   | 设置字符编码成功                     |
|        | =false=  | 设置字符编码失败                     |

* OPcache

PHP >= 5.5

** Enable

Enable OPcache in PHP =./configure= command when compile
#+begin_src sh
--enable-opcache
#+end_src

Check path to OPcache extension (is also displayed after PHP compiling)
#+begin_src sh
php-config --extension-dir
#+end_src

Specify the path to OPcache extension in =php.ini=
#+begin_src sh
## Must be loaded before Xdebug if applicable
zend_extension = /path/to/opcache.so
#+end_src

Confirm OPcache is working
#+begin_src php
<?php
phpinfo();
#+end_src

** Configure

#+begin_src sh
# php.ini
opcache.validate_timestamps = 1 # Set to "0" in production
                                # If set to "0", must manually clear cache for changes
opcache.revalidate_freq = 0
opcache.memory_consumption = 64
opcache.interned_strings_buffer = 16
opcache.max_accelerated_files = 4000
opcache.fast_shutdown = 1
#+end_src

* PDO

- PDO :: PHP Data Objects \\
         PHP 原生扩展，一组通过单一的用户接口操作不同 SQL 数据库的类的集合。

** DSN

- DSN ::  Data Source Name \\
          数据库连接信息。

#+CAPTION: 语法
#+begin_src sh
<driver>:<key>=<value>;...
    <driver>    # database driver name, eg. mysql, sqlite
    <key>
        host    # host name or IP
        port
        dbname
        charset
#+end_src

** =PDO=

#+CAPTION: 方法
| =__construct()=      |                                    |
|----------------------+------------------------------------|
| =prepare()=          | 准备声明，返回 =PDOStatement= 对象 |

#+CAPTION: 事务方法
| =beginTransaction()= |                                    |
|----------------------+------------------------------------|
| =inTransaction()=    | 判断是否在事务中                   |
|----------------------+------------------------------------|
| =commit()=           |                                    |
|----------------------+------------------------------------|
| =rollBack()=         |                                    |

*** 常量

<<pdo_param_>>
| =PARAM_BOOL=         |                  |
|----------------------+------------------|
| =PARAM_NULL=         |                  |
|----------------------+------------------|
| =PARAM_INT=          |                  |
|----------------------+------------------|
| =PARAM_STR=          |                  |
|----------------------+------------------|
| =PARAM_LOB=          | SQL large object |
|----------------------+------------------|
| =PARAM_STMT=         | Recordset        |
|----------------------+------------------|
| =PARAM_INPUT_OUTPUT= |                  |

<<pdo_fetch>>
| =FETCH_ASSOC= | Array indexed by column name, [[pdo_fetch_example][example]]                             |
|---------------+-------------------------------------------------------------------|
| =FETCH_BOTH=  | Array indexed by both column name and number, [[pdo_fetch_example][example]]             |
|---------------+-------------------------------------------------------------------|
| =FETCH_BOUND= |                                                                   |
|---------------+-------------------------------------------------------------------|
| =FETCH_CLASS= |                                                                   |
|---------------+-------------------------------------------------------------------|
| =FETCH_INTO=  |                                                                   |
|---------------+-------------------------------------------------------------------|
| =FETCH_LAZY=  | Anonymous object with column names as properties, [[pdo_fetch_example][example]]         |
|---------------+-------------------------------------------------------------------|
| =FETCH_NAMED= |                                                                   |
|---------------+-------------------------------------------------------------------|
| =FETCH_NUM=   | Array indexed by column number as returned in result set, [[pdo_fetch_example][example]] |
|---------------+-------------------------------------------------------------------|
| =FETCH_OBJ=   | Anonymous object with column names as properties, [[pdo_fetch_example][example]]         |

*** =__construct()=

#+begin_src php
public PDO::__construct (
    string $dsn
[,  string $username
[,  string $password
[,  array  $options
]]] )
#+end_src

#+CAPTION: 示例
#+begin_src php
try {
    $pdo = new PDO(
        'mysql:host=127.0.0.1;dbname=books;port=3306;charset=utf8',
        'USERNAME',
        'PASSWORD'
    );
} catch (PDOException $e) {
    echo "Database connection failed";
    exit;
}
#+end_src

*** =prepare()=

#+begin_src php
PDOStatement PDO::prepare (
    string $statement
[,  array  $driver_options = array()
] )
#+end_src

*** =beginTransaction()=

#+begin_src php
bool PDO::beginTransaction ( )
#+end_src

*** =commit()=

#+begin_src php
bool PDO::commit ( )
#+end_src

#+CAPTION: 示例
#+begin_src php
$dbh->beginTransaction();
$sth = $dbh->exec("DROP TABLE fruit");
$dbh->commit();
#+end_src

*** =rollBack()=

#+begin_src php
bool PDO::rollBack ( )
#+end_src

#+CAPTION: 示例
#+begin_src php
$dbh->beginTransaction();
$sth = $dbh->exec("DROP TABLE fruit");
$sth = $dbh->exec("UPDATE dessert SET name = 'hamburger'");
/* Recognize mistake and roll back changes */
$dbh->rollBack();
#+end_src

*** =inTransaction()=

#+begin_src php
bool PDO::inTransaction ( )
#+end_src

** =PDOStatement=

| =bindParam()=   | 为声明中的参数绑定值   |
|-----------------+------------------------|
| =bindValue()=   | 为声明中的参数绑定值   |
|-----------------+------------------------|
| =execute()=     |                        |
|-----------------+------------------------|
| =fetch()=       | 获取结果集下一行       |
|-----------------+------------------------|
| =fetchAll()=    | 获取结果集所有行       |
|-----------------+------------------------|
| =fetchColumn()= | 获取结果集下一行的一列 |
|-----------------+------------------------|
| =fetchObject()= | 获取结果集下一行为对象 |

*** =bindParam()=

#+begin_src php
bool PDOStatement::bindParam (
    mixed  $parameter
,   mixed &$variable // 变量引用，与 bindValue() 不同
[,  int    $data_type = PDO::PARAM_STR
[,  int    $length
[,  mixed  $driver_options
]]] )
#+end_src

| =$data_type= | =int= | [[pdo_param_][=PDO::PARAM_=]] |

#+CAPTION: 示例 1
#+begin_src php
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit WHERE calories < :calories AND colour = :colour');
$sth->bindParam(':calories', $calories, PDO::PARAM_INT);
$sth->bindParam(':colour', $colour, PDO::PARAM_STR, 12);
$sth->execute();
#+end_src

#+CAPTION: 示例 2
#+begin_src php
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit WHERE calories < ? AND colour = ?');
$sth->bindParam(1, $calories, PDO::PARAM_INT);
$sth->bindParam(2, $colour, PDO::PARAM_STR, 12);
$sth->execute();
#+end_src

#+CAPTION: 示例 3
#+begin_src php
$colour = 'red';
$sth = $dbh->prepare('CALL puree_fruit(?)');
$sth->bindParam(1, $colour, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 12);
$sth->execute();
#+end_src

*** =bindValue()=

#+begin_src php
bool PDOStatement::bindValue (
    mixed $parameter
,   mixed $value
[,  int   $data_type = PDO::PARAM_STR
] )
#+end_src

| =$data_type= | =int= | [[pdo_param_][=PDO::PARAM_=]] |

#+CAPTION: 示例
#+begin_src php
$sql = 'SELECT id FROM users WHERE email = :email AND id = :id';
$statement = $pdo->prepare($sql);

$email = filter_input(INPUT_GET, 'email');
$statement->bindValue(':email', $email);

$userId = filter_input(INPUT_GET, 'id');
$statement->bindValue(':id', $userId, PDO::PARAM_INT);
#+end_src

*** =execute()=

#+begin_src php
bool PDOStatement::execute ( [ array $input_parameters ] )
#+end_src

*** =fetch()=

#+begin_src php
mixed PDOStatement::fetch (
[   int $fetch_style
[,  int $cursor_orientation = PDO::FETCH_ORI_NEXT
[,  int $cursor_offset = 0
]]] )
#+end_src

| =$fetch_style= | =int=   | [[pdo_fetch_][=PDO::FETCH_=]]，默认为 =PDO::FETCH_BOTH= |
|----------------+---------+-----------------------------------------|
| 返回值         | =mixed= | 取决于 =$fetch_style=                   |
|                | =false= | 失败，eg. 结果集为空                    |

#+CAPTION: 迭代结果集
#+begin_src php
while (($result = $statement->fetch(PDO::FETCH_ASSOC)) !== false) {
    echo $result['email'];
}
#+end_src

<<pdo_fetch_example>>
#+CAPTION: =$fetch_style= 示例
#+begin_src php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetch(PDO::FETCH_ASSOC);
// Array
// (
//    [name] => apple
//    [colour] => red
// )

$result = $sth->fetch(PDO::FETCH_BOTH);
// Array
// (
//     [name] => apple
//     [0] => apple
//     [colour] => red
//     [1] => red
// )

$result = $sth->fetch(PDO::FETCH_NUM);
// Array
// (
//     [0] => apple
//     [1] => red
// )

$result = $sth->fetch(PDO::FETCH_LAZY);
// PDORow Object
// (
//     [name] => apple
//     [colour] => red
// )

$result = $sth->fetch(PDO::FETCH_OBJ);
echo $result->name, ' ', $result->color;
// apple red
#+end_src

*** =fetchAll()=

#+begin_src php
array PDOStatement::fetchAll (
[   int   $fetch_style
[,  mixed $fetch_argument
[,  array $ctor_args = array()
]]] )
#+end_src

| =$fetch_style= | =int= | [[pdo_fetch_][=PDO_FETCH_=]] |

在不确定结果集是否能放入内存的情况下，避免使用 =fetchAll()= 。

#+CAPTION: 示例
#+begin_src php
$results = $statement->fetchAll(PDO::FETCH_ASSOC);
foreach ($results as $result) {
    echo $result['email'];
}
#+end_src

*** =fetchColumn()=

#+begin_src php
mixed PDOStatement::fetchColumn ( [ int $column_number = 0 ] )
#+end_src

#+CAPTION: 示例
#+begin_src php
while (($email = $statement->fetchColumn(1)) !== false) {
    echo $email;
}
#+end_src

*** =fetchObject()=

#+begin_src php
mixed PDOStatement::fetchObject (
[   string $class_name = "stdClass"
[,  array  $ctor_args
]] )
#+end_src

#+CAPTION: 示例
#+begin_src php
while (($result = $statement->fetchObject()) !== false) {
    echo $result->name;
}
#+end_src

* Reflection

用于分析类、属性、方法，比内置函数（如 =get_class_methods()= ）功能更强，且不需要实例化类（如 =var_dump()= ）。

| =Reflector=           | =Reflection*= 类都实现 =Reflector= 接口 |
|-----------------------+-----------------------------------------|
| =Reflection=          |                                         |
|-----------------------+-----------------------------------------|
| =ReflectionClass=     |                                         |
|-----------------------+-----------------------------------------|
| =ReflectionMethod=    |                                         |
|-----------------------+-----------------------------------------|
| =ReflectionParameter= |                                         |

** =Reflection=

| =export()= | 输出 =Reflector= 对象信息 |

*** =export()=

#+begin_src php
public static string export (
    Reflector $reflector
[,  bool      $return = false
] )
#+end_src

#+begin_src php
class Foo {
    public $bar;
    public function baz($arg) {}
}
Reflection::export(new ReflectionClass('Foo'));
#+end_src

** =ReflectionClass=

| =__construct()= |              |
|-----------------+--------------|
| =export()=      | 输出类的信息 | 

*** =export=

#+begin_src php
public static string export (
    mixed $argument // 类名或对象
[,  bool  $return = false
] )
#+end_src

#+begin_src php
class Foo {
    public $bar;
    public function baz($arg) {}
}
ReflectionClass::export('Foo');
ReflectionClass::export(new Foo());
#+end_src

** 示例

#+begin_src php
interface Module {
    public function execute();
}

class ModuleManager {
    private static $interface = 'Module';
    private $config = [];
    private $modules = [];

    public function __construct($config) {
        $this->config = $config;
    }

    public function init() {
        foreach ($this->config as $name => $config) {
            $module = self::initModule($name, $config);
            array_push($this->modules, $module);
        }
    }

    private static function initModule($name, $config) {
        $class = new ReflectionClass($name);
        if (!$class->implementsInterface(self::$interface)) {
            throw new Exception('Bad module name "' . $name . '"');
        }
        $module = $class->newInstance();

        // Init params
        foreach ($config as $name => $value) {
            // Setter method
            $methodName = 'set' . ucfirst($name);
            if (!$class->hasMethod($methodName)) {
                continue;
            }
            $method = $class->getMethod($methodName);
            
            // Check if param should be object
            $params = $method->getParameters();
            $paramClass = $params[0]->getClass();

            // Invoke setter and pass in param
            if (empty($paramClass)) {
                $method->invoke($module, $value);
            } else {
                $method->invoke($module, $paramClass->newInstance($value));
            }
        }
        return $module;
    }

    public function execute() {
        foreach ($this->modules as $module) {
            $module->execute();
        }
    }
}

class FooModule implements Module {
    private $foo;
    public function setFoo($foo) {
        $this->foo = $foo;
    }
    public function execute() {
        echo 'foo = ' . $this->foo;
    }
}

class BarModule implements Module {
    private $bar;
    public function setBar($bar) {
        $this->bar = $bar;
    }
    public function execute() {
        echo 'bar = ' . $this->bar;
    }
}

$config = [
    'FooModule' => ['foo' => 1],
    'BarModule' => ['bar' => 2]
];
$manager = new ModuleManager($config);
$manager->init();
$manager->execute();
// foo = 1, bar = 2
#+end_src

* SPL
** 自动加载

| [[spl_spl_autoload][=spl_autoload()=]]            | 默认自动加载函数                         |
|-----------------------------+------------------------------------------|
| [[spl_spl_autoload_call][=spl_autoload_call()=]]       | 手动查找类或接口，并调用 autoload 函数   |
|-----------------------------+------------------------------------------|
| [[spl_spl_autoload_extenstions][=spl_autoload_extensions()=]] | 注册并返回 =spl_autoload()= 使用的后缀名 |
|-----------------------------+------------------------------------------|
| [[spl_spl_autoload_functions][=spl_autoload_functions()=]]  | 返回所有已注册的 autoload 函数名         |
|-----------------------------+------------------------------------------|
| [[spl_spl_autoload_register][=spl_autoload_register()=]]   | 注册为自动加载函数                       |
|-----------------------------+------------------------------------------|
| [[spl_spl_autoload_unregister][=spl_autoload_unregister()=]] | 取消注册为自动加载函数                   |

*** =spl_autoload()=
<<spl_spl_autoload>>

#+begin_src php
void spl_autoload (
    string $class_name
[,  string $file_extensions = spl_autoload_extensions()
])
#+end_src

未指定 autoloader，或不加参数调用 =spl_autoload_register()= 时， =spl_autoload()= 将代替 =__autoload()= 被调用，自动加载类文件。

=spl_autoload()= 由 C 实现，比一般 PHP 实现的 autoload 函数速度快。

#+CAPTION: 支持命名空间映射为目录层级。
#+begin_src php
// ./lib/Foo/Bar/Object.class.php
namespace Foo\Bar;
class Object {}

// ./index.php
define('LIB_DIR', 'lib/');
set_include_path(get_include_path() . PATH_SEPARATOR . LIB_DIR);
spl_autoload_extensions('.class.php');
spl_autoload_register();
$obj = new Foo\Bar\Object(); // 加载 lib/Foo/Bar/Object.class.php
#+end_src

*** =spl_autoload_call()=
<<spl_spl_autoload_call>>

#+begin_src php
void spl_autoload_call ( string $class_name )
#+end_src

*** =spl_autoload_extensions()=
<<spl_spl_autoload_extenstions>>

#+begin_src php
string spl_autoload_extensions ([ string $file_extensions ] )
#+end_src

#+begin_src php
spl_autoload_extensions('.php,.class.php');
#+end_src

*** =spl_autoload_functions()=
<<spl_spl_autoload_functions>>

#+begin_src php
array spl_autoload_functions ( void )
#+end_src

*** =spl_autoload_register()=
<<spl_spl_autoload_register>>

#+begin_src php
bool spl_autoload_register (
[   callable $autoload_function
[,  bool     $throw = true
[,  bool     $prepend = false
]]])
#+end_src

支持注册多个自动加载函数，需要加载类文件时，将按注册顺序依次调用，直到类可以实例化。

#+CAPTION: 自定义自动加载函数。
#+begin_src php
// ./Foo/Bar.class.php
class Foo_Bar {}

// ./index.php
function autoload($class) {
    $path = str_replace('_', '/', $class);
    $file = __DIR__ . '/' . $path . '.class.php';
    if (file_exists($file)) {
        require_once($file);
    }
}
spl_autoload_register('autoload');
$foo = new Foo_Bar(); // 加载 Foo/Bar.class.php
#+end_src

#+CAPTION: 支持命名空间的自动加载函数。
#+begin_src php
// ./Foo/Bar/Object.class.php
namespace Foo\Bar;
class Object {}

// ./index.php
function autoload($class) {
    // 输入参数是 fully qualified 类名，不以 \ 开头
    // $class == 'Foo\Bar\Object'
    $file = __DIR__ . '/' . $class . '.class.php';
    if (preg_match('/\\\\/', $file)) {
        $file = str_replace('\\', '/', $file);
    }
    if (file_exists($file)) {
        require_once($file);
    }
}
spl_autoload_register('autoload');
$obj = new Foo\Bar\Object();
#+end_src

*** =spl_autoload_unregister()=
<<spl_spl_autoload_unregister>>

#+begin_src php
bool spl_autoload_unregister ( mixed $autoload_function )
#+end_src

** 函数

| *类*     | [[spl_class_implements][=class_implements()=]]  | 返回类或接口实现的接口 |
|----------+-----------------------+------------------------|
|          | [[spl_class_parents][=class_parents()=]]     | 返回基类               |
|----------+-----------------------+------------------------|
|          | [[spl_class_uses][=class_uses()=]]        | 返回类使用的 trait     |
|----------+-----------------------+------------------------|
| *迭代器* | =iterator_apply()=    |                        |
|----------+-----------------------+------------------------|
|          | =iterator_count()=    |                        |
|----------+-----------------------+------------------------|
|          | =iterator_to_array()= |                        |
|----------+-----------------------+------------------------|
| *其他*   | =spl_classes()=       |                        |
|----------+-----------------------+------------------------|
|          | =spl_object_hash()=   |                        |

*** =class_implements()=
<<spl_class_implements>>

#+begin_src php
array class_implements (
    mixed $class
[,  bool  $autoload = true
])
#+end_src

#+begin_src php
interface Foo {}
class Bar implements Foo {}
class_implements('Bar');     // ['Foo' => 'Foo']
class_implements(new Bar()); // ['Foo' => 'Foo']
#+end_src

*** =class_parents()=
<<spl_class_parents>>

#+begin_src php
array class_parents (
    mixed $class
[,  bool  $autoload = true
])
#+end_src

#+begin_src php
class foo {}
class bar extends foo {}
class baz extends bar {}

print_r(class_parents(new baz));
print_r(class_parents('baz'));
// Array
// (
//     [bar] => bar
//     [foo] => foo
// )
#+end_src

*** =class_uses()=
<<spl_class_uses>>

#+begin_src php
array class_uses (
    mixed $class
[,  bool  $autoload = true
])
#+end_src

#+CAPTION: 示例
#+begin_src php
trait foo {}
class bar {
    use foo;
}

print_r(class_uses(new bar));
print_r(class_uses('bar'));
// Array
// (
//     [foo] => foo
// )
#+end_src

** Datastructures

Datastructures
- =SplDoublyLinkedList=
- =SplStack=
- =SplQueue=
- =SplHeap=
- =SplMaxHeap=
- =SplMinHeap=
- =SplPriorityQueue=
- =SplFixedArray=
- =SplObjectStorage=

** Iterators

Iterators
- =AppendIterator=
- =ArrayIterator=
- =CachingIterator=
- =CallbackFilterIterator=
- =DirectoryIterator=
- =EmptyIterator=
- =FilesystemIterator=
- =FilterIterator=
- =GlobIterator=
- =InfiniteIterator=
- =IteratorIterator=
- =LimitIterator=
- =MultipleIterator=
- =NoRewindIterator=
- =ParentIterator=
- =RecursiveArrayIterator=
- =RecursiveCachingIterator=
- =RecursiveCallbackFilterIterator=
- =RecursiveDirectoryIterator=
- =RecursiveFilterIterator=
- =RecursiveIteratorIterator=
- =RecursiveRegexIterator=
- =RecursiveTreeIterator=
- =RegexIterator=

** Interfaces

Interfaces
- =Countable=
- =OuterIterator=
- =RecursiveIterator=
- =SeekableIterator=
- =SplObserver=
- =SplSubject=

** Exceptions

=Exception=
- =LogicException=
  + =BadFunctionCallException=
    - =BadMethodCallException=
  + =DomainException=
  + =InvalidArgumentException=
  + =LengthException=
  + =OutOfRangeException=
- =RuntimeException=
  + =OutOfBoundsException=
  + =OverflowException=
  + =RangeException=
  + =UnderflowException=
  + =UnexpectedValueException=

** Classes

- =ArrayObject=
- =SplFileInfo=
- =SplFileObject=
- =SplTempFileObject=

* Stream
** Stream

| [[stream_context_create][=stream_context_create()=]]  | Creates a stream context |

*** =stream_context_create()=
<<stream_context_create>>

#+begin_src php
resource stream_context_create (
[   array $options
[,  array $params
]] )
#+end_src  

#+CAPTION: 示例
#+begin_src php
$requestBody = '{"username":"josh"}';
$context = stream_context_create(array(
    'http' => array(
        'method' => 'POST',
        'header' => "Content-Type: application/json;charset=utf-8;\r\n" .
                    "Content-Length: " . mb_strlen($requestBody),
        'content' => $requestBody
    )
));
$response = file_get_contents('https://my-api.com/users', false, $context);
#+end_src

** Stream wrapper

| [[php_stdin][=php://stdin=]]  |                          |
|----------------+--------------------------|
| =php://stdout= |                          |
|----------------+--------------------------|
| =php://stderr= |                          |
|----------------+--------------------------|
| =php://input=  | Raw data of request body |
|----------------+--------------------------|
| =php://output= | Output buffer            |
|----------------+--------------------------|
| =php://fd=     | File descriptor          |
|----------------+--------------------------|
| =php://memory= |                          |
|----------------+--------------------------|
| =php://temp=   |                          |
|----------------+--------------------------|
| =php://filter= |                          |
http://php.net/manual/en/wrappers.php

*** =php://stdin=
<<php_stdin>>

#+CAPTION: 示例
#+begin_src php
$handleIn  = fopen('php://stdin', 'r');
$handleOut = fopen('output.txt', 'w+');
while ($line = fgets($handleIn)) {
    fwrite($handleOut, $line);
}
#+end_src

** Stream filter

#+CAPTION: Stream filter 函数
| [[stream_filter_append][=stream_filter_append()=]]   | Attach a filter to a stream           |
|----------------------------+---------------------------------------|
| [[stream_filter_register][=stream_filter_register()=]] | Register a user defined stream filter |

#+CAPTION: Stream filter 列表
| =string.toupper=    |   |
|---------------------+---|
| =string.tolower=    |   |
|---------------------+---|
| =string.strip_tags= |   |
|---------------------+---|
| =string.rot13=      |   | 
http://php.net/manual/en/filters.php  

*** =stream_filter_append()=
<<stream_filter_append>>

#+begin_src php
resource stream_filter_append (
    resource $stream
,   string   $filtername
[,  int      $read_write
[,  mixed    $params
]] )
#+end_src

#+CAPTION: 示例
#+begin_src php
$handle = fopen('data.txt', 'rb');
stream_filter_append($handle, 'string.toupper');
while (feof($handle) !== true) {
    echo fgets($handle);
}
fclose($handle);
#+end_src

*** =stream_filter_register()=
<<stream_filter_register>>

#+begin_src php
bool stream_filter_register (
    string $filtername
,   string $classname
)
#+end_src

*** 自定义 stream filter

自定义 stream filter 必须扩展 =php_user_filter= 类并实现 =filter()= 方法。

#+CAPTION: 自定义 stream filter 示例
#+begin_src php
class DirtyWordsFilter extends php_user_filter
{
    /**
     * @param resource $in       Incoming bucket brigade
     * @param resource $out      Outgoing bucket brigade
     * @param int      $consumed Number of bytes consumed
     * @param bool     $closing  Last bucket brigade in stream?
     */
    public function filter($in, $out, &$consumed, $closing)
    {
        $words = array('grime', 'dirt', 'grease');
        $wordData = array();
        foreach ($words as $word) {
            $replacement = array_fill(0, mb_strlen($word), '*');
            $wordData[$word] = implode('', $replacement);
        }
        // array('grime', 'dirt', 'grease');
        $bad = array_keys($wordData);
        // array('*****', '****', '******');
        $good = array_values($wordData);
        // Iterate each bucket from incoming bucket brigade
        while ($bucket = stream_bucket_make_writeable($in)) {
            // Censor dirty words in bucket data
            $bucket->data = str_replace($bad, $good, $bucket->data);
            // Increment total data consumed
            $consumed += $bucket->datalen;
            // Send bucket to downstream brigade
            stream_bucket_append($out, $bucket);
        }
        return PSFS_PASS_ON;
    }
}
#+end_src

#+begin_src php
stream_filter_register('dirty_words_filter', 'DirtyWordsFilter');

$handle = fopen('data.txt', 'rb');
stream_filter_append($handle, 'dirty_words_filter');
while (feof($handle) !== true) {
    echo fgets($handle);
}
fclose($handle);
#+end_src

** 示例

功能
- 从 FTP 读取指定时间范围的日志文件
- 日志文件被 bzip2 压缩
- 筛选出日志中包含特定字符串的行

#+begin_src php
$dateStart = new \DateTime();
$dateInterval = \DateInterval::createFromDateString('-1 day');
$datePeriod = new \DatePeriod($dateStart, $dateInterval, 30);
foreach ($datePeriod as $date) {
    $file = 'sftp://USER:PASS@rsync.net/' . $date->format('Y-m-d') . '.log.bz2';
    if (file_exists($file)) {
        $handle = fopen($file, 'rb');
        stream_filter_append($handle, 'bzip2.decompress');
        while (feof($handle) !== true) {
            $line = fgets($handle);
            if (strpos($line, 'www.example.com') !== false) {
                fwrite(STDOUT, $line);
            }
        }
    fclose($handle);
    }
}
#+end_src

* Xdebug
* XHProf

[[https://pecl.php.net/package/xhprof][XHProf (Hierarchical Profiler)]]

** 安装

#+CAPTION: 安装 XHProf
#+begin_src sh
wget http://pecl.php.net/get/xhprof-0.9.4.tgz
tar zxf xhprof-0.9.4.tgz
cd xhprof-0.9.4/extension/
phpize
./configure
make
make install
#+end_src

#+CAPTION: 移动 =lib= 和 =html= 目录
#+begin_src sh
cp -r xhprof_lib xhprof_html <app_root>
#+end_src

#+CAPTION: 安装 Graphviz
#+begin_src sh
wget https://graphviz.gitlab.io/pub/graphviz/stable/SOURCES/graphviz.tar.gz
tar zxf graphviz*.tar.gz
cd graphviz*
./configure
make
make install
#+end_src

#+CAPTION: 修改 =php.ini=
#+begin_src sh
[xhprof]
extension=xhprof.so
xhprof.output_dir=<dir_path>
# 为了使用 Graphviz 绘图功能，取消禁用方法
;disable_functions = ...
#+end_src

#+CAPTION: 重启 php-fpm
#+begin_src sh
cat /usr/local/php/var/run/php-fpm.pid
kill -USR2 <ps_num>
#+end_src

** 使用

#+CAPTION: 示例
#+begin_src php
// 代码之前
xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);

// 运行代码
...

// 代码之后
include_once APP_PATH . '/xhprof_lib/utils/xhprof_lib.php';
include_once APP_PATH . '/xhprof_lib/utils/xhprof_runs.php';
$xhprof_data = xhprof_disable();
$xhprof_runs = new XHProfRuns_Default();
$run_id = $xhprof_runs->save_run($xhprof_data, 'xhprof');

$url = APP_PATH . '/xhprof_html/index.php?run=' . $run_id . '&source=xhprof';
echo '<a href="'.$url.'">'.$url.'</a>';
#+end_src

