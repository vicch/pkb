#+SETUPFILE: ../../styles/readtheorg.setup
#+TITLE: System Design

* System Design Cheatsheet
** Basic Steps
*** Scoping

Clarify and agree on the scope of the system.

#+ATTR_HTML: :class no-border
| *User cases*  | Who is going to use it?                                 |
|               | How (as a sequence of events) are they going to use it? |
|---------------+---------------------------------------------------------|
| *Constraints* | Traffic: requests per second, requests types etc.       |
|               | Data handling: data input/output per second etc.        |
|               | Multithreading etc.                                     |

*** Abstract Design

Sktech high level architecture of important components and connections between them. For example:

- Load balancer
- Application layer (web server)
- Data storage layer (master/slave, database cluster etc.)
- Caching layer
- Other services

*** Component Design

#+ATTR_HTML: :class no-border
| *APIs*            |                                                                  |
|-------------------+------------------------------------------------------------------|
| *OO*              | Map features to modules/classes.                                 |
|                   | Relations and patterns: singleton, composition, inheritance etc. |
|-------------------+------------------------------------------------------------------|
| *Database schema* |                                                                  |

*** Bottlenecks

Identify and mitigate bottlenecks. E.g.

- Bottleneck: data volume is too large ot database is too slow.
- Mitigation: Distribute data on multiple machines, or add in-memory caching.

*** Scaling

#+ATTR_HTML: :class no-border
| *Vertical*   |                                   |
|--------------+-----------------------------------|
| *Horizontal* | Caching                           |
|              | Load balancing                    |
|              | Database partitioning, map-reduce |

** Key Topics
*** Platform

Separating the backend into application layer and platform layer. The platform layer provides low-level services, such as caching and APIs, to the application layer. Advantages:

- Application layer and platform layer can scale independently. Platform layer scales up when there is a new service, e.g. a new API endpoint.
- Platform layer can be reused to support multiple products, e.g. a web application and a mobile app.

file:../images/system_design/01.png

*** Load Balancing

#+ATTR_HTML: :class no-border
| *Smart client*           | Client-side load balancing, more difficult to use. |
|--------------------------+----------------------------------------------------|
| *Hardware load balancer* | Reliable but expensive.                            |
|--------------------------+----------------------------------------------------|
| *Software load balancer* | Most used.                                         |

*** Caching

Caching generally refers to in-memory caches, such as Memcached and Redis.

#+ATTR_HTML: :class no-border
| *Application caching* | Check if a key exists in cache. If not, retrieve from database.                          |
|-----------------------+------------------------------------------------------------------------------------------|
| *Database caching*    | Database's default config usually provides some degree of caching.                       |
|                       | There are more advanced optimizations, such as MySQL InnoDB buffer pool and query cache. |

Caching strategies:

#+ATTR_HTML: :class no-border
| *Pre-calculation* | Pre-calculate expensive data and store in cache. |
|                   | E.g. suggestion data, aggregation data.          |
|-------------------+--------------------------------------------------|
| *Hot data*        | Store more frequently used data in faster cache. |

*** Database

#+ATTR_HTML: :class no-border
| *Replication*  | Replicating changes between distributed databases to synchronize data.                             |
|----------------+----------------------------------------------------------------------------------------------------|
| *Partitioning* | Decomposing data tables vertically (column-wise) or horizontally (row-wise, also called sharding). |
|----------------+----------------------------------------------------------------------------------------------------|
| *Map-reduce*   | Map-reduce layer makes it possible to perform intensive operations in a reasonable amount of time. |
|                | E.g.  calculating suggested users in a social graph, or generating analytics reports.              |

** Web System Design Topics

#+ATTR_HTML: :class no-border
| *Security*        | CORS                                                                                                |
|-------------------+-----------------------------------------------------------------------------------------------------|
| *Search*          | Full-text search engines that use indexes for better performance, e.g. Sphinx, Lucene, Solr         |
|-------------------+-----------------------------------------------------------------------------------------------------|
| *Service workers* | Scripts browser run in the background, for features that don't need a web page or user interaction. |
|                   | E.g. push notifications, background sync.                                                           |
|-------------------+-----------------------------------------------------------------------------------------------------|
| *Web workers*     | Scripts ran in background thread, to perform tasks without interfering with the UI.                 |
|                   | They can perform I/O using =XMLHttpRequest= and sending messages to JS event handlers.              |
|-------------------+-----------------------------------------------------------------------------------------------------|
| *Rendering*       | Server side rendering: full page reloads, more requests, slower rendering.                          |
|                   | Client side rendering: partial reloads (Ajax), less requests, faster rendering.                     |
|-------------------+-----------------------------------------------------------------------------------------------------|
| *CDN*             |                                                                                                     |
|-------------------+-----------------------------------------------------------------------------------------------------|
| *Lazy loading*    |                                                                                                     |

** Links

1. [[https://gist.github.com/vasanthk/485d1c25737e8e72759f][System Design Cheatsheet]]

* How to Ace a System Design Interview
** Focus on Thought Process

What sets it apart from a coding or an algorithms interview, is that whatever solution you come up with during the interview is just a side effect. What we actually care about is the +thought process behind the design choices+.

As engineers we have a tremendous amount of freedom. We aren’t asked to implement fully-specced features. Instead we +take ownership of open-ended problems+, and it’s our job to come up with the best solution to each. We need people we can trust to +do the right thing without a lot of supervision+ — people who can own large projects and take them consistently in the right direction. Invariably, this means being able to communicate effectively with the people around you.

** Topics
*** Concurrency

#+ATTR_HTML: :class no-border
| *Threads*     |                                                                                                                  |
|---------------+------------------------------------------------------------------------------------------------------------------|
| *Deadlock*    |                                                                                                                  |
|---------------+------------------------------------------------------------------------------------------------------------------|
| *Starvation*  | When a process is perpetually denied necessary resources to process its work.                                    |
|---------------+------------------------------------------------------------------------------------------------------------------|
| *Coherence*   | When multiple processes access the same memory location, they should always get the most recently updated value. |
|---------------+------------------------------------------------------------------------------------------------------------------|
| *Consistency* | Constraints of a shared address space on the order in which memory operations must be performed.                 |
|               | When processes all follow this order to access memory locations, deadlock and incoherent data can be avoided.    |

*** Networking

#+ATTR_HTML: :class no-border
| *Latency*    | The time taken for a packet to be transferred across a network.     |
|--------------+---------------------------------------------------------------------|
| *Throughput* | The quantity of data being sent and received within a unit of time. |

file:../images/system_design/02.jpg

file:../images/system_design/03.png

*** Real-World Performance

|          | *Randome access* | *Read 1MB sequentially* |
|----------+------------------+-------------------------|
| *Memory* | 0.0001ms         | 0.003ms                 |
|----------+------------------+-------------------------|
| *SSD*    | 0.016ms          | 0.049ms                 |
|----------+------------------+-------------------------|
| *Disk*   | 2ms              | 0.825ms                 |

| Send 1MB over network         | 0.022ms  |
|-------------------------------+----------|
| Packet in same data center    | 0.5ms    |
|-------------------------------+----------|
| Packet from CA to Netherlands | 75ms     |

1s = 1,000ms (millisecond) = 1,000,000μs (microsecond) = 1,000,000,000ns (nanosecond)

*** Availability & Reliability

#+ATTR_HTML: :class no-border
| *Single point of failure* |   |

** Links

1. [[http://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/][How to Ace a System Design Interview]]

* Design a Parking Lot
** Handling Ambiguity

Ask clarifying questions before going into any detail.

#+ATTR_HTML: :class no-border
| *Question-related* | What problem area the question is about?                            |
|                    | What is the expected output? E.g. class hierarchy, database schema. |
|--------------------+---------------------------------------------------------------------|
| *System-related*   | The nature of the system.                                           |
|                    | - Is the parking lot an open space or in a building?                |
|                    | The scope of the system.                                            |
|                    | - How many spots are in the parking lot?                            |
|                    | - Are there multiple entrances?                                     |
|                    | The business model of the system.                                   |
|                    | - Do the spots have different sizes and prices?                     |
|                    | - Can smaller cars park in bigger spots?                            |
|                    | - Should the spots be filled in a certain order?                    |
|                    | - Are there daily or monthly passes?                                |
|                    | - Are there premium spots?                                          |

** Class Design

#+BEGIN_SRC plantuml :file ../images/system_design/04.svg
!include ../../styles/plantuml-style

class AbstractVehicle {
  string licensePlate
}
AbstractVehicle <|-- Car
AbstractVehicle <|-- Motorcycle
AbstractVehicle <|-- Bus

class ParkingLot {
  string location
  + ParkingSpot parkVehicle()
}

class ParkingSpot {
  long id
  enum size
}

ParkingLot *-- ParkingSpot : contains
#+END_SRC

** Implementation

Implement some of the key functions, e.g.

- finding an available spot of specified size
- parking a vehicle
- locating a vehicle
- calculating cost

** Performance

Think about performace, and try to optimize with special data structures if necessary. Examples:

*** Find Spot

To find a spot of certain size: instead of iterating through a list of spots (O(n) time), store all available spots in a stack (O(1) time).

To enable switching between different implementations of a core function, abstract that function to an interface. E.g. instead of maintaining the available spots inside =ParkingLot= class, use a =ParkingLotSpotPool= (each =ParkingLot= object holds several =ParkingLotSpotPool= objects) to maintain it, and expose interfaces such as =occupySpot()= and =releaseSpot()=.

*** Find Vehicle

To find the parking spot of a vehicle, e.g. in order to release the spot when the car leaves, the vehicle parking info can be stored in a hash map, keyed by the vechicle's license number.

** Take Hints

The interviewer probably has a list of key topics he wants to be covered, so don't force your way through the process, instead take hints from the interviewer and let hims guides you.

** Links

1. [[https://www.youtube.com/watch?v=DSGsa0pu8-k][Design a Parking Lot]]

* Design a Messenger Service
** Features

Talk about features needed, from basic to advanced, e.g.

#+ATTR_HTML: :class no-border
| *Content types* | Text, image, voice, video    |
|-----------------+------------------------------|
| *Modes*         | 1-on-1, group                |
|-----------------+------------------------------|
| *Clients*       | Web, mobile                  |
|-----------------+------------------------------|
| *States*        | Sent, delivered, read        |
|-----------------+------------------------------|
| *History*       | How long is the history kept |

+Architecture can be derived from features.+

** High-level Architecture

In the most basic scenario, there are 2 clients and 1 server.

Message sent from one client should be stored on the server, because the other client may not be online and the message cannot be lost. So the actual message sending is asynchronized.

The server is the bottleneck of the service. It should be horizontally scalable.

When there are multiple servers, clients should be able to connect to different servers while being in the same conversation.

** Low-level Architecture

+Once the high-level architecture is clear, drill down to the design and functions of a single server node.+

Messages sent to the servers should be stored in queues. When the receiver comes online, the messages are retrieved from the queue, can then can be deleted.

Because each time a client sends a message, it may connect to different servers (therefore stored in different queues), when the receicer retrieves the messages, they may be in an arbitrary order (assuming the timestamps on the messages are not precise enough).

** States

1. Sender sends a message to a server.
2. Server responds with a =sent= message.
3. Receiver retrieves the message.
4. Server sends (server initiates the connection) a =delivered= message to the sender.
5. Receiver reads the message.
6. Receiver sends a =read= message (can be implemented as a special type of message that works the same way behind the scene as a normal text message) to the sender via a server (can be a different server).
7. Sender retrieves the =read= message.

** Push Notification

Push notification is usually platform-dependent, and there are existing services that can be used directly, such as Google Cloud Messenging. Push notifications usually work in fire-and-forget manners.

There can be a layer of servers that are dedicated to push notification processing. Once a normal server receives a message, it can request one of these servers to handle the push notification.

** More Topics

- Other features: group chat, message history etc.
- Scaling
- Caching
- Database sharding, replication
- Monitoring

** Links

1. [[https://www.youtube.com/watch?v=5m0L0k8ZtEs][Design a Messenger Service]]

* Design Twitter
** Features

Think about the core features:

- Post tweet
- Display timeline
- Follow and unfollow

** Naive Solution

Start with an RDB approach of 2 tables:

- user table
- tweet table

#+BEGIN_SRC plantuml :file ../images/system_design/05.svg
!include ../../styles/plantuml-style

class User {
  long id
  string name
}

class Tweet {
  long id
  long user_id
  string content
}

User "1" *-- "n" Tweet
#+END_SRC

As the number of tweet records grow, the table will need to be sharded.

** Optimization

Analyze the characteristics of the service:

- Reading request is more frequent (and expected to be more responsive) than posting request.
- Availability is more important than consistency, i.e. the timeline can be eventually consistent, with a certain amount of delay.

Because user's home timeline is hot data, it should be optimized by being pre-generated and stored in in-memory caches, whenver one of the users he follows posts a tweet. This is a tradeoff of time vs. space, we store duplicates of the tweet to achieve faster reading.

As it's an expensive operation (in terms of calculation and storage), the pre-generation and caching of timelines can be limited to users who are active within a certain period of time. For inactive user, generate histimeline (which will be less responsive compared with an active user's timeline) only when he becomes active again.

** Edge Case

For a user who has millions of followers, it takes time for a new tweet to be propogated to all followers, meanwhile, reactions (by users who received the new tweet faster) to that tweet may be propogated faster.

** Searching

Searching needs to access tweets from all users. There can be a process (parallel to propogation of a tweet to followers) which adds the tweet to a search index.

** More Topics

- Push notification
- Advertisement

** Links

1. [[https://www.youtube.com/watch?v=KmAyPUv9gOY][Design Twitter]]

* Design Uber and Lyft
** Features

Start with 2 to 3 core features and build the system around them. As for Uber, the core features are:

- Matching customer and driver
- Mapping and routing

** Links

1. [[https://www.youtube.com/watch?v=J3DY3Te3A_A][Design Uber and Lyft]]
* Design Shopify
** Keywords

Common words of e-commerce websites:

- Customers
- Products
- Orders
- Payments
- Shipments

Think about things that make a service like Shopify special and valuable:

- Shop owners: a platform of many stores
- Isolation: how to guarantee data of different stores don't get mixed up
- Plugins: additional features that shop owners could choose to (purchase and) use
- Customization: storefront can be customized by shop owners
- Admin: friendly UI to handle all management tasks of the stores
- APIs: supports external tools

** Key Features

Choose some key features to dig into:

- Automated storefront creation
- Backend (admin)
- Hosting and networking

** Links

1. [[Design Shopify][https://www.youtube.com/watch?v=lEL4F_0J3l8]]

* How Load Balancers Work?

Application layer (layer 7) load balancing is aware of HTTP protocal, it examines HTTP headers in the request, and makes decisions based on the content, e.g. routing requests to a certain server specifically. A device that performs Layer 7 load balancing is often referred to as a reverse-proxy server.

DNS load balancing happens when URL is translated to IP address. This can be used to route traffic to different data centers by large-scale services, e.g. Google.

-----

For stateful service, to be able to route one user's request to the same server, the load balancer can use a hash map which maps from the user's IP (or higher layer data such as HTTP headers) to a list of servers.

This can only guarantee for a short period of time, because the user's IP may change, and the server may shut down. By using _consistent hashing_, the number of requests that are affected in the case of re-hashing can be minimized.

** Links

1. [[https://www.youtube.com/watch?v=escR-07yVAs][How Load Balancers Work?]]
