#+setupfile: ../../styles/readtheorg.setup
#+title: Interview

* Strategy for Software Engineering Position Interview

Employers are generally looking at 5 areas when hiring a software engineer:

1. Technical knowledge of specific technology product.
2. Experience of the business problem domain.
3. General technical and architecture sense.
4. Personality and working style.
5. IQ, problem solving skills.

While 1 to 4 are straightforward, the most interesting and challenging is the item 5. Depending on how good you can manage pressure, your brain can be totally blank at the interview.

A short interview doesn't necessarily reflects a person's ability in actual work. There is a factor of luck involved in this process. Nevertheless, most employers are willing to accept a higher false negative (positive as qualified for the position, and negative as unqualified) rate, to keep the false positive rate very low.

There is no trick in gaining good knowledge, high IQ and the ability to speak and think under pressure, but I've found some useful techniques and strategies.

** Rephrasing

Rephrase the question slowly in your own words. This can help to make sure you fully understand the question, and clarify if there is any hidden assumption you have made. Repeat the question slowly also gives you more time to think. From the interview perspective, they can see the candidate's ability to digest a problem.

** Visual Model

Construct a visual model of the problem. Use a whiteboard or paper to diagram the problem. Our brain is better in understanding visual information than textual. From an interview's perspective, they can see a clear picture of how you analyze the problem.

** Using Cases

Never try to tackle the general problem at first, start with a simple, special case, and see how you would solve it first. This reduces the complexity of the problem, and lets you focus on the core of it.

** Baseline Solution

Start with a naive (usually brute-force) solution to establish a baseline. Analyze the complexity of this naive solution for future comparison with improved solutions.

** Improved Solution
*** Divide and Conquer

Decompose the problem into smaller ones, and solve each separately, then combine the results for the overall problem.

*** Transformation

Try to model the problem by well-studied data structures (e.g. tree, graph) and models (e.g. search, sort), and apply corresponding algorithms to solve them.

*** Recursion

Try to structure the problem in a recursive form, by solving the base case and expanding the solution in a recursive manner.

*** Greedy Method

Try to modify attributes of current best solution to see if you can get a better one. Don't be trapped in a local optimal solution.

*** Approximation

Instead of finding the exact solution, see if it is acceptable to find an approximate solution. For example, a probabilistic approach to try 100 random combinations and pick the best outcome.

** Keep Talking

Keep talking while you are thinking about the solution, so the interviewer understands how you analyze things. You can also show how well you can express your thoughts. It is also easier for the interviewer to guide you or give hints.

** Generalization

After finding a working solution for the simple case, extend it and see if you can find a general pattern, and generalize the solution for the general problem. From the interview's perspective, they can assess the candidate's ability in thinking in different levels of abstraction, and the ability to apply a solution in a broader range of problems.

** Links

1. [[http://horicky.blogspot.com/2010/06/strategy-for-software-engineering.html][Strategy for Software Engineering Position Interview]]
