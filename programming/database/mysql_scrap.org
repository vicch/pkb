#+setupfile: ../../styles/readtheorg.setup
#+title: MySQL Scrap

* MySQL 开发规范

[[http://www.2cto.com/database/201403/285170.html][Source]]

** 建表

*库名、表名、字段名使用小写字母，并采用下划线分割。* 如果大小写混合使用，可能存在 =abc= ， =Abc= ， =ABC= 等多个表共存，容易导致混乱。字段名显式区分大小写，但实际使用不区分，即不可以建立两个名字一样但大小写不一样的字段。

#+caption: 配置参数 =lower_case_table_names=
| =0= | （Linux 默认）以实际情况存储，大小写敏感 |
|-----+------------------------------------------|
| =1= | 以小写存储，大小写不敏感                 |
|-----+------------------------------------------|
| =2= | 以实际情况存储，但以小写比较             |

*库名、表名、字段名不超过 32 个字符。* 库名、表名、字段名支持最多 64 个字符，但为了统一规范、易于辨识以及减少传输量，禁止超过 32 个字符。

*库名、表名、字段名禁止使用 MySQL 保留字。* 当库名、表名、字段名等属性含有保留字时，SQL 语句必须用反引号引用属性名称，这将使得 SQL 语句书写、Shell 脚本中变量的转义等变得非常复杂。

-----

*使用 InnoDB 存储引擎。* InnoDB 引擎是 MySQL 5.5 版本以后的默认引擘， _支持事务、行级锁，有更好的数据恢复能力、并发性能，同时对多核、大内存、SSD 等硬件支持更好，支持数据热备份等，_ 因此 InnoDB 相比 MyISAM 有明显优势。

*表字符集使用 UTF8，必要时可申请使用 UTF8MB4 字符集。* UTF8 字符集存储汉字占用 3 个字节，存储英文字符占用一个字节。UTF8 统一而且通用，不会出现转码乱码风险。如果遇到 emoji 等表情符号的存储需求，可申请使用 UTF8MB4 字符集。

** 数据类型
*** 数字

*使用 =UNSIGNED= 存储非负数值。* 同样的字节数，非负存储的数值范围更大。如 =TINYINT= 有符号为 -128 ~ 127，无符号为 0 ~ 255。

*使用 =INT UNSIGNED= 存储 IPv4。* =UNSINGED INT= 存储 IP 地址占用 4 字节， =CHAR(15)= 则占用 15 字节。另外，计算机处理整数类型比字符串类型快。使用 =INT UNSIGNED= 而不是 =CHAR(15)= 来存储IPV4地址，通过 MySQL 函数 =inet_ntoa= 和 =inet_aton= 来进行转化。IPv6 地址目前没有转化函数，需要使用 =DECIMAL= 或两个 =BIGINT= 来存储。

#+begin_src sql
SELECT INET_ATON('209.207.224.40'); # 3520061480
SELECT INET_NTOA(3520061480);       # 209.207.224.40
#+end_src

*使用 =TINYINT= 来代替 =ENUM= 类型。* =ENUM= 类型在需要修改或增加枚举值时，需要在线 =DDL= ，成本较大。 =ENUM= 列值如果含有数字类型，可能会引起默认值混淆。

*数值类型括号后面的数字只表示宽度，跟存储范围没有关系。* =INT= 类型固定占用 4 字节存储， =INT(4)= 代表显示字符宽度为 4 位，不代表存储长度。 =INT(3)= 默认显示 3 位，空格补齐，超出时正常显示。

*** 字符串

*使用 =VARBINARY= 存储大小写敏感的变长字符串或二进制内容。* =VARBINARY= 默认区分大小写，没有字符集概念，速度快。

*** =NULL=

*所有字段均定义为 =NOT NULL= ，用 0、特殊值或空串代替 =NULL= 值。* 对表的每一行，每个为 =NULL= 的列都需要额外的空间来标识。B 树索引时不会存储 =NULL= 值，所以如果索引字段可以为 =NULL= ，索引效率会下降。

*** 其他

*存储年使用 =YEAR= 类型。存储日期使用 =DATE= 类型。 存储时间（精确到秒）使用 =TIMESTAMP= 类型。* =DATETIME= 和 =TIMESTAMP= 都是精确到秒，但优先选择 =TIMESTAMP= ，因为 =TIMESTAMP= 只有 4 字节，而 =DATETIME= 8 字节。同时 =TIMESTAMP= 具有自动赋值以及自动更新的特性。注意：在 5.5 和之前的版本中，如果一个表中有多个 =TIMESTAMP= 列，那么最多只能有一列能具有自动更新功能。

#+caption: =TIMESTAMP= 初始化与自动更新
#+begin_src sql
COLUMN foo TIMESTAMP DEFAULT 0;
COLUMN foo TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
COLUMN foo TIMESTAMP DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP;
COLUMN foo TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;
#+end_src
** 索引

*表必须有主键，推荐使用 =UNSIGNED= 自增列作为主键。* 表没有主键，InnoDB 会默认设置隐藏的主键列。没有主键的表在定位数据行的时候非常困难，也会降低基于行复制的效率。

*禁止冗余索引。* 索引是双刃剑，会增加维护负担，增大 IO 压力。 =(a,b,c)= 和 =(a,b)= ，后者为冗余索引。可以利用 +前缀索引+ 来达到加速目的，减轻维护负担。

*禁止重复索引。* 如 =PRIMARY KEY foo; UNIQ INDEX foo= ，重复索引增加维护负担、占用磁盘空间，同时没有任何益处。

*不在低基数列上建立索引。* 如「性别」，大部分场景下，低基数列上建立索引的精确查找，相对于不建立索引的全表扫描没有任何优势，而且增大了 IO 负担。

*合理使用覆盖索引减少 IO，避免排序。* +覆盖索引+ 能从索引中获取需要的所有字段，从而避免回表进行二次查找，节省 IO。InnoDB 存储引擎中， secondary index（非主键索引，又称辅助索引、二级索引）没有直接存储行地址，而是存储主键值。如果用户需要查询 secondary index 中所不包含的数据列，则需要先通过 secondary index 查找到主键值，然后再通过主键查询到其他数据列，因此需要查询两次。覆盖索引则可以在一个索引中获取所有需要的数据，因此效率较高。主键查询是天然的覆盖索引。例如 =SELECT email，uid FROM user_email WHERE uid = 1;= ，如果 =uid= 不是主键，适当时候可以将索引添加为 =index(uid，email)= ，以获得性能提升。

** 查询

*只获取必要的字段，禁止使用 =SELECT *= 。* 减少网络带宽消耗，能有效利用覆盖索引，表结构变更对程序基本无影响。

*用 =IN= 代替 =OR= ， =IN= 包含的值应少于 1000 个。* =IN= 是范围查找，MySQL 内部会对 =IN= 的列表值进行排序后查找，比 =OR= 效率更高。

*用 =UNION ALL= 代替 =UNION= 。* =UNION ALL= 不需要对结果集再进行排序。

*减少与数据库交互次数，尽量采用批量 SQL 语句。*

#+caption: 减少交互次数示例
#+begin_src sql
INSERT ON DUPLICATE KEY UPDATE # UNIQUE 索引列或主键值重复时，改为 UPDATE 现有行
REPLACE INTO                   # 等价于 INSERT，但 UNIQUE 索引列或主键值重复时，先 DELETE 现有行再插入新行
INSERT IGNORE                  # 忽略 INSERT 时的错误，如 UNIQUE 索引列或主键值重复时，丢弃插入行，也不报错
INSERT INTO VALUES (...)       # 一次插入多行
#+end_src

*拆分复杂 SQL，避免大事务。* 简单的 SQL 容易使用到 MySQL 的 query cache，减少锁表时间特别是 MyISAM，可以使用多核 CPU。

-----

*避免使用 =now()= 、 =rand()= 、 =sysdate()= 、 =current_user()= 等不确定结果的函数。* 语句级复制场景下，引起主从数据不一致。不确定值的函数产生的 SQL 语句无法利用 query cache。

*禁止使用 =ORDER BY rand()= 。* =ORDER BY rand()= 会为表增加一个伪列，然后用 =rand()= 函数为每一行数据计算出 =rand()= 值，然后基于该行排序，通常会生成磁盘上的临时表，因此效率非常低。建议先使用 =rand()= 函数获得随机的主键值，然后通过主键获取数据。

-----

*对同一个表的多次 =ALTER= 操作合并为一次操作。* MySQL 对表的修改绝大部分操作都需要锁表并重建表，而锁表则会对线上业务造成影响。为减少这种影响，必须把对表的多次 =ALTER= 操作合并为一次操作。例如，要给表增加一个字段，同时给已有的字段建立索引：

#+begin_src sql
# 分两步
ALTER TABLE foo ADD COLUMN bar VARCHAR(10);
ALTER TABLE foo ADD INDEX idx_baz(baz);
# 合并为一步
ALTER TABLE foo ADD COLUMN bar VARCHAR(10), ADD INDEX idx_baz(baz);
#+end_src

** 分页

#+caption: 分页方式一
#+begin_src sql
SELECT * FROM thread
WHERE thread_id = 771025 AND deleted = 0
ORDER BY gmt_create ASC LIMIT 0, 15;
#+end_src

#+attr_html: :class no-border dense
| *原理* | 一次性根据过滤条件取出所有字段进行排序返回。                                               |
|        | 数据访问开销 = 索引 IO + 索引全部记录结果对应的表数据 IO                                   |
|--------+--------------------------------------------------------------------------------------------|
| *缺点* | 越翻到后面执行效率越差，时间越长，尤其表数据量很大的时候。                                 |
|--------+--------------------------------------------------------------------------------------------|
| *适用* | 中间结果集很小（10000 行以下），或者查询条件复杂（涉及多个不同查询字段，或者多表连接）时。 |

#+caption: 分页方式二
#+begin_src sql
SELECT thread.* FROM (
    SELECT id FROM thread
    WHERE thread_id = 771025 AND deleted = 0
    ORDER BY gmt_create ASC LIMIT 0, 15
) a, thread
WHERE a.id = thread.id;
#+end_src

#+attr_html: :class no-border dense
| *前提* | 假设 =thread= 表主键是 =id= 列，且有覆盖索引 =secondary key:(thread_id, deleted, gmt_create)=         |
|--------+-------------------------------------------------------------------------------------------------------|
| *原理* | 先根据过滤条件，利用覆盖索引取出主键 =id= 进行排序，再进行 =JOIN= 操作取出其他字段。                  |
|        | 数据访问开销 = 索引 IO + 索引分页后结果对应的表数据 IO                                                |
|--------+-------------------------------------------------------------------------------------------------------|
| *优点* | 每次翻页消耗的资源和时间都基本相同。                                                                  |
|--------+-------------------------------------------------------------------------------------------------------|
| *适用* | 当查询和排序字段（即 =WHERE= 子句和 =ORDER BY= 子句涉及的字段）有对应覆盖索引时，且中间结果集很大时。 |

** 特性

*避免使用存储过程、触发器、视图、自定义函数等。* 这些高级特性有性能问题，以及未知 bug 较多。业务逻辑放到数据库会造成数据库的 DDL、scale out、sharding 等变得更加困难。

*禁止使用分区表。* 分区表对分区键有严格要求，分区表在表变大后，执行 DDL、sharding、单表恢复等都变得更加困难。因此禁止使用分区表，并建议业务端手动 sharding。

** 安全

*禁止在数据库中存储明文密码。* 采用加密字符串存储密码，并保证密码不可解密，同时采用随机字符串加盐保证密码安全。防止数据库数据被公司内部人员或黑客获取后，采用字典攻击等方式暴力破解用户密码。

*禁止有 super 权限的应用程序账号存在。* super 权限会导致 read only 失效，导致较多诡异问题而且很难追踪。

** 实践

*将大字段、访问频率低的字段拆分到单独的表中存储，分离冷热数据。* 有利于有效利用缓存，防止读入无用的冷数据，较少磁盘 IO，同时保证热数据常驻内存，提高缓存命中率。

*采用合适的分库分表策略。* 如千库十表、十库百表。采用合适的分库分表策略，有利于业务发展后期快速对数据库进行水平拆分，同时分库可以有效利用 MySQL 的 +多线程复制+ 特性。

*不要在 MySQL 数据库中存放业务逻辑。* 数据库是有状态的服务，变更复杂而且速度慢，如果把业务逻辑放到数据库中，将会限制业务的快速发展。建议把业务逻辑提前，放到前端或中间逻辑层，而把数据库作为存储层，实现逻辑与存储的分离。

