#+setupfile: ../../styles/readtheorg.setup
#+title: Database Scrap

* 数据库的最简单实现
** 存储格式

第一步，将所要保存的数据，写入文本文件，即数据库。

为了方便读取，数据必须分成记录，每一条记录的长度规定为等长。比如，假定每条记录的长度是 800 字节，那么第 5 条记录的开始位置就在 3200 字节。但大多数时候不知道某一条记录在第几个位置，只知道主键的值，一条条比对记录效率太低，所以实际应用中， _数据库往往采用 B 树（B-tree）格式储存数据。_

** B 树

要理解 B 树，必须从二叉查找树（binary search tree）讲起。二叉查找树是一种查找效率非常高的数据结构，n 个节点的查找树中找到目标值，一般只需要 log(n) 次比较。

二叉查找树的查找效率与层数相关，越处在下层的数据，就需要越多次比较。极端情况下，n 个数据需要 n 次比较才能找到目标值。对于数据库来说，每进入一层，就要从硬盘读取一次数据，这非常致命， _因为硬盘的读取时间远远大于数据处理时间，数据库读取硬盘的次数越少越好。_

B 树是对二叉查找树的改进，它将相关数据尽量集中在一起，以便一次读取多个数据，减少硬盘操作次数。B 树的三个特点：

- 一个节点可以容纳多个值。
- 除非数据已经填满，否则不会增加新的层，也就是说 B 树追求层数越少越好。
- 子节点的个数与父节点中值的个数，有严格的大小对应关系。一般来说，如果父节点有 a 个值，那么就有 a+1 个子节点。

file:../images/database_scrap/01.png

B 树有利于减少读取硬盘的次数，假定一个节点可以容纳 100 个值，那么 3 层的 B 树可以容纳 100 万个数据，如果换成二叉查找树，则需要 20 层。

** 索引

数据库以 B 树格式储存，只解决了按照「主键」查找数据的问题，如果想查找其他字段，就需要建立索引。 _所谓索引，就是以某个字段为关键字、以记录在数据库中的位置为值的 B 树文件。_ 这种索引查找方法，叫做索引顺序存取方法 （[[http://en.wikipedia.org/wiki/ISAM][Indexed Sequential Access Method]]，ISAM）。它已经有多种实现，比如 C-ISAM 库和 D-ISAM 库。

** 高级功能

#+attr_html: :class no-border
| *SQL*      | 数据库通用操作语言，需要 SQL 解析器，将 SQL 命令解析为对应的 ISAM 操作。     |
|------------+------------------------------------------------------------------------------|
| *表链接*   | 数据库的两张表通过「外键」建立连接关系，需要对这种操作进行优化。             |
|------------+------------------------------------------------------------------------------|
| *事务*     | 批量进行一系列数据库操作，需要有一个「操作日志」，以便失败时对操作进行回滚。 |
|------------+------------------------------------------------------------------------------|
| *备份机制* | 保存数据库的副本。                                                           |
|------------+------------------------------------------------------------------------------|
| *远程操作* | 使用户可以在不同的机器上，通过 TCP/IP 协议操作数据库。                       |

** Links

1. [[http://www.ruanyifeng.com/blog/2014/07/database_implementation.html][数据库的最简单实现]]

* NoSQL and RDBMS
** RDBMS vs. NoSQL

The negative posts about NoSQL generally share the same tone:

#+begin_quote
I have developed with RDBMS for 10 years and I've never needed to use a NoSQL database. RDBMS can scale just as good as NoSQL.
#+end_quote

Statements like the above illustrate the developer has a biased attachment to a technology they've used all their life. It's most likely these developers have also made message queues fit in databases, and marvelled at their configuration-mapping ability to have an eagerly-loaded chain of nested objects auto-magically bind to their pristine domain model. Yes this is quite a feat to be proud of, unfortunately it also happens to be a one-liner in a lot of non-relational databases.

This characteristic of being able to _serialize domain model without requiring it to be mapped to a database using an ORM_ is not a feature limited to NoSQL databases, other data persistence solutions like db4o (an object orientated database) achieve this equally as well.

RDBMSs are good at storing flat, relational, tabular data. They still remain the best solution for storing relational data. Using a NoSQL data store isn't an all-or-nothing technology. It actually serves as a good complementary technology to have along-side an RDBMS. It's still all about picking the right tool and using the right technology for the task at hand.

** NoSQL Advantages
*** Performance

As everything is retrieved by key, effectively all queries hits an index. Redis can achieve 110000 SETs/second, 81000 GETs/second in an entry level Linux box. This is not possible with any RDBMS.

*** Replication

Most NoSQL data stores have effortless replication. In Redis this is achieved by un-commenting one line: =slaveof ipaddress port= in =redis.conf=.

*** Schema-less Persistence

As there is no formal data structure to bind to, and most values are stored as binary or strings, you are free to choose the serialization format. A lot of client libraries opt for a simplistic language-neutral format like JSON.

*** Scalability

Key-value data stores, by nature, have good characteristics to scale. When everything is accessed by key, clients can easily predict the source of data given a pool of available data stores. Most clients also come with consistent hashing where the addition or removal of a data store does not significantly impact this predictability.

*** Efficiency and Cost

Most NoSQL data stores are both free and open source. They also perform better and provide better utilization of server resources than comparative RDBMS solutions.

*** Advanced Data Constructs

NoSQL variants like Redis, in addition to a key-value data store, also provide rich data constructs and atomic operations on server-side lists, sets, sorted sets and hashes which make things like message-queuing, notification systems, load-balancing work tasks trivial to implement.

** Links

1. [[https://github.com/ServiceStackV3/mythz_blog/blob/master/pages/129.md][NoSQL and RDBMS]]
* Database Scalability
** Indexing

Use appropriate indexes for fast access. Analyze the frequently-used queries and examine the query plan when it is executed, e.g. use MySQL =EXPLAIN=.

** Data Denormalization

Table join is an expensive operation and should be reduced as much as possible. One technique is to denormalize data such that certain information is repeated in different tables.

** Database Replication

Typical web application with high read/write ratio can benefit from multiple read-only replicas (slaves). All updates go to master, which sends change logs to the replicas. However, there will be a time lag for replication.

** Table Partitioning
*** Vertical Partitioning

Vertical partitioning is about storing different tables on different machines, or moving some (rarely accessed) columns to a different table. For query performance reason, _tables that are often joined in queries need to reside in the same database_.

*** Horizontally Partitioning

Horizontally partitioning is about moving different rows within a table into a separated database. For example, partition the rows according to user ID. Locality of reference is very important, we should _put the rows (of different tables) of the same user in the same machine_ if these information will be accessed together.

** Transaction Processing

Distinguish OLAP (Online Analytical Processing, query intensive) and OLTP (Online Transactional Processing, update intensive) operations.

** Object Relational Mapping

Although ORM layer is useful to simplify persistent logic, it is usually not friendly to scalability.

** Links

1. [[http://horicky.blogspot.com/2008/03/database-scalability.html][Database Scalability]]
