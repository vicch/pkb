#+SETUPFILE: ../../styles/readtheorg.setup
#+TITLE: C++ Container

* Container
** List

|               |                        |                          | *Ordered* | *Allow Dup* |
|---------------+------------------------+--------------------------+-----------+-------------|
| *Sequence*    | =<array>=              | Static contiguous array  |           |             |
|---------------+------------------------+--------------------------+-----------+-------------|
|               | =<vector>=             | Dynamic contiguous array |           |             |
|---------------+------------------------+--------------------------+-----------+-------------|
|               | =<list>=               | Double-linked list       |           |             |
|---------------+------------------------+--------------------------+-----------+-------------|
|               | =<forward_list>=       | Single-linked list       |           |             |
|---------------+------------------------+--------------------------+-----------+-------------|
|               | =<deque>=              | Double-ended queue       |           |             |
|---------------+------------------------+--------------------------+-----------+-------------|
| *Associative* | =<map>=                | Key-value pairs          | Yes       | No          |
|---------------+------------------------+--------------------------+-----------+-------------|
|               | =<multimap>=           | Key-value pairs          | Yes       | Yes         |
|---------------+------------------------+--------------------------+-----------+-------------|
|               | =<set>=                | Keys                     | Yes       | No          |
|---------------+------------------------+--------------------------+-----------+-------------|
|               | =<multiset>=           | Keys                     | Yes       | Yes         |
|---------------+------------------------+--------------------------+-----------+-------------|
|               | =<unordered_map>=      | Key-value pairs          | No        | No          |
|---------------+------------------------+--------------------------+-----------+-------------|
|               | =<unordered_multimap>= | Key-value pairs          | No        | Yes         |
|---------------+------------------------+--------------------------+-----------+-------------|
|               | =<unordered_set>=      | Keys                     | No        | No          |
|---------------+------------------------+--------------------------+-----------+-------------|
|               | =<unordered_multiset>= | Keys                     | No        | Yes         |
|---------------+------------------------+--------------------------+-----------+-------------|
| *Adaptor*     | =<stack>=              |                          |           |             |
|---------------+------------------------+--------------------------+-----------+-------------|
|               | =<queue>=              |                          |           |             |
|---------------+------------------------+--------------------------+-----------+-------------|
|               | =<priority_queue>=     |                          |           |             |

- Associative ordered containers are implemented with sorted data structures, e.g. binary search tree, search time is =O(logn)=.
- Associative unordered containers are implemented hash data structures, search time is =O(1)= armotized and =O(n)= worst-case.

file:../images/cpp_container/01.png

* =<deque>=

| *Capacity*     |   |
|----------------+---|
| =size()=       |   |
|----------------+---|
| =empty()=      |   |
|----------------+---|
| *Modifier*     |   |
|----------------+---|
| =push_back()=  |   |
|----------------+---|
| =push_front()= |   |
|----------------+---|
| =pop_back()=   |   |
|----------------+---|
| =pop_front()=  |   |

* =<map>=

Implemented as red-black tree.

| *Access*   | =[]=       |                                                               |
|------------+------------+---------------------------------------------------------------|
| *Iterator* | =begin()=  |                                                               |
|------------+------------+---------------------------------------------------------------|
|            | =end()=    |                                                               |
|------------+------------+---------------------------------------------------------------|
|            | =rbegin()= |                                                               |
|------------+------------+---------------------------------------------------------------|
|            | =rend()=   |                                                               |
|------------+------------+---------------------------------------------------------------|
| *Capacity* | =empty()=  |                                                               |
|------------+------------+---------------------------------------------------------------|
|            | =size()=   |                                                               |
|------------+------------+---------------------------------------------------------------|
| *Modifier* | =clear()=  | Erase all elements                                            |
|------------+------------+---------------------------------------------------------------|
|            | =erase()=  | Erase specified element                                       |
|------------+------------+---------------------------------------------------------------|
|            | =insert()= |                                                               |
|------------+------------+---------------------------------------------------------------|
| *Lookup*   | =count()=  | Number of elements matching specified key, only return 0 or 1 |
|------------+------------+---------------------------------------------------------------|
|            | =find()=   | Find element with specified key                               |

** =[]=

#+begin_src cpp
map<string, int> m;
map<string, int>::iterator i;

// 写入
m['a'] = 1;
// 等价于
m.insert(make_pair('a', 1));

// 读取
cout << m['a'] << endl; // Key 不存在时值为 0
// 等价于
i = m.find('a');
cout << (i == m.end() ? 0 : i->second) << endl;
#+end_src

** =find()=

#+begin_src cpp
iterator find (const key_type& k);
#+end_src

#+CAPTION: 示例
#+begin_src cpp
map<string, int> m;
map<string, int>::iterator i;

i = m.find('a');
cout << (i == m.end() ? 'Not found' : i->second) << endl;
#+end_src

* =<queue>=

| *Iterator* |   |
|------------+---|
| =front()=  |   |
|------------+---|
| *Modifier* |   |
|------------+---|
| =push()=   |   |
|------------+---|
| =pop()=    |   |

* =<set>=

| *Capacity* |   |
|------------+---|
| =size()=   |   |
|------------+---|
| *Iterator* |   |
|------------+---|
| =begin()=  |   |
|------------+---|
| =end()=    |   |
|------------+---|
| *Modifier* |   |
|------------+---|
| =insert()= |   |
|------------+---|
| =erase()=  |   |
|------------+---|
| *Search*   |   |
|------------+---|
| =find()=   |   |

* =<stack>=

| *Access*   |   |
|------------+---|
| =top()=    |   |
|------------+---|
| *Modifier* |   |
|------------+---|
| =push()=   |   |
|------------+---|
| =pop()=    |   |

* =<unordered_map>=

[[https://en.cppreference.com/w/cpp/container/unordered_map][C++ Reference | Containers Library | =std::unordered_map=]]

Implemented as hash table (buckets). Average search, insertion, removal time is =O(1)=.

| *Lookup* | =find()= | Find element with specific key |

** =find()=

[[https://en.cppreference.com/w/cpp/container/unordered_map/find][C++ Reference | Containers Library | =std::unordered_map= | =find=]]

#+begin_src cpp
iterator find( const Key& key );
#+end_src

Returns iterator to an element with key equivalent to =key=. If no such element is found, past-the-end iterator =end()= is returned:

#+begin_src cpp
std::unordered_map<int,char> example = { {1, 'a'}, {2, 'b'} };
 
auto search = example.find(2);
if (search != example.end()) {
    std::cout << "Found " << search->first << ": " << search->second << '\n';
} else {
    std::cout << "Not found\n";
}
#+end_src

* =<vector>=

| *Access*   | =[]=          | Index                                                              |
|------------+---------------+--------------------------------------------------------------------|
|            | =front()=     | First element                                                      |
|------------+---------------+--------------------------------------------------------------------|
|            | =back()=      | Last element                                                       |
|------------+---------------+--------------------------------------------------------------------|
| *Iterator* | =begin()=     |                                                                    |
|------------+---------------+--------------------------------------------------------------------|
|            | =end()=       |                                                                    |
|------------+---------------+--------------------------------------------------------------------|
|            | =rbegin()=    |                                                                    |
|------------+---------------+--------------------------------------------------------------------|
|            | =rend()=      |                                                                    |
|------------+---------------+--------------------------------------------------------------------|
| *Capacity* | =empty()=     |                                                                    |
|------------+---------------+--------------------------------------------------------------------|
|            | =size()=      |                                                                    |
|------------+---------------+--------------------------------------------------------------------|
|            | =reserve()=   | Reserves storage                                                   |
|------------+---------------+--------------------------------------------------------------------|
|            | =capacity()=  | Number of elements that can be held in currently allocated storage |
|------------+---------------+--------------------------------------------------------------------|
| *Modifier* | =clear()=     | Erase all elements                                                 |
|------------+---------------+--------------------------------------------------------------------|
|            | =erase()=     | Erase specified elements                                           |
|------------+---------------+--------------------------------------------------------------------|
|            | =insert()=    | Insert element at specified location                               |
|------------+---------------+--------------------------------------------------------------------|
|            | =push_back()= | Append element to the end                                          |
|------------+---------------+--------------------------------------------------------------------|
|            | =pop_back()=  | Remove last element                                                |

** Constructor

#+begin_src cpp
int n[] = {1,2,3};

// 定义
vector<int> foo1;                                  // 空
vector<int> foo2 (10);                             // 指定大小
vector<int> foo3 (4, 100);                         // 指定大小和初始值
vector<int> foo4 (foo2.begin(), foo2.end());       // 迭代
vector<int> foo5 (foo3);                           // 复制
vector<int> foo6 (n, n + sizeof(n) / sizeof(int)); // 从数组生成
vector<vector<int>> foo7 (n, vector<int> (m));     // 二维

// 初始化
vector<int> foo8 = {1, 2, 3};
vector<int> foo() { return vector<int> {1, 2, 3}; }
#+end_src

** =push_back()=

#+begin_src cpp
void push_back (const value_type& val);
#+end_src

** =erase()=

#+begin_src cpp
iterator erase (iterator position);
iterator erase (iterator first, iterator last);
#+end_src

#+CAPTION: 示例
#+begin_src cpp
v.erase(v.begin() + 4);                // 移除第 5 个元素
v.erase(v.begin() + 1, v.begin() + 3); // 移除第 2 至第 3 个元素
#+end_src
