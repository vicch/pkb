#+setupfile: ../../styles/readtheorg.setup
#+title: Chef

* Chef
** ChefDK

[[https://docs.chef.io/about_chefdk.html][Chef Docs | About ChefDK]]

Chef Development Kit 用于在本地环境开发和测试架构代码，然后将代码发送至 Chef Server。

** Chef Server

Chef Server is the central repo of info and code to provision the nodes.

** Chef Client

Chef Client 运行在每台需要配置的节点上，执行配置以使节点达到理想状态（此过程称为 convergence）。Chef Client 不实时监控节点的状态，只在运行时才检查节点的状态并进行修改。

Chef Client 的默认模式为从 Chef Server 获取配置，可以使用本地模式，执行本地的配置。

** Embedded Ruby

Chef 安装时会同时安装一个嵌入式 Ruby 环境，独立于系统本身的 Ruby 环境。

#+begin_src sh
chef exec # 在嵌入式 Ruby 环境中执行命令
chef gem  # 在嵌入式 Ruby 环境中执行 gem
#+end_src

* Feature
** Search

[[https://docs.chef.io/chef_search.html][Chef Docs | About Search]]

*** 索引

| =node=        |                              |
|---------------+------------------------------|
| =role=        |                              |
|---------------+------------------------------|
| =environment= |                              |
|---------------+------------------------------|
| =<data_bag>=  | 每个 data bag 使用单独的索引 |

*** 函数

可以在 recipe 中调用。

#+begin_src ruby
search('<index>', '<query>')
#+end_src

#+begin_src ruby
search('node', 'role:web').each do |web_node|
  ...
end
#+end_src

** Data Bag

[[https://docs.chef.io/data_bags.html][Chef Docs | About Data Bags]]

Data bag 是以 JSON 形式存储的全局变量，用于节点间共享的数据，如用户、组等。Data bag 数据被 Chef Server 索引，可以用于 cookbook 或搜索。

* Syntax
** Run-list

[[https://docs.chef.io/run_lists.html][Chef Docs | About Run-lists]]

#+begin_src ruby
'recipe[<cookbook>::<recipe>]'
'recipe[<cookbook>]'           # 不指定 cookbook 则默认为 default cookbook
'role[<role>]'
#+end_src

** Versioning

[[https://docs.chef.io/cookbook_versioning.html][Chef Docs | About Cookbook Versioning]]

表示 cookbook 版本的语法，用于各种配置文件和命令行中。

| ~=~  | 等于                     |
|------+--------------------------|
| =>=  | 大于                     |
|------+--------------------------|
| =<=  | 小于                     |
|------+--------------------------|
| =>== | 大于等于，或 optimistic  |
|------+--------------------------|
| =<== | 小于等于                 |
|------+--------------------------|
| =~>= | 接近大于，或 pessimistic |

#+begin_src ruby
~> 2.6   # 2.6 <= version < 3.0
~> 2.6.5 # 2.6.5 <= version < 2.7.0
#+end_src

* Resource

在 recipe 文件中，一个 resource 描述一个可配置项（如文件、包、服务）的理想状态。

| 文件系统 | =file=          |
|          | =remote_file=   |
|          | =cookbook_file= |
|          | =template=      |
|          | =directory=     |
|----------+-----------------|
| 系统     | =package=       |
|          | =service=       |
|----------+-----------------|
| 脚本     | =bash=          |
|          | =execute=       |
|----------+-----------------|
| 用户     | =user=          |
|          | =group=         |

** Guards

[[https://docs.chef.io/resource_common.html#guards][Chef Docs | Guards]]

Guard 语句决定是否执行 resource。

#+begin_src ruby
<resource> ... do
  not_if|only_if '<bash_script>'
  not_if|only_if do
    <ruby_expr>
  end
end
#+end_src

#+caption: =example.ruby=
#+begin_src ruby
bash 'script' do
  code 'mkdir -p /var/www/foo/'
  not_if '[ -d /var/www/foo/ ]'
  # Or
  not_if do
    File.directory?('/var/www/foo/')
  end
end
#+end_src

** Notifications

[[https://docs.chef.io/resource_common.html#notifications][Chef Docs | Notifications]]

*** =notifies=

=notifies= 表示在一个 resource 的状态改变时（如文件被修改），通知另一个 resource 执行某动作。

#+begin_src ruby
notifies :<action>, '<resource>[<name>]', :<timer>
  <action>   # 在指定 resource 上执行的动作
  <resource> # 指定 resource 类型
  <name>     # 指定 resource 名
  <timer>
    :before    # 在当前 resource 状态发生变化前执行动作
    :delayed   # 在 Chef Client 运行结束前执行动作
    :immediate # 立即执行动作
#+end_src

*** =subscribes=

=subscribes= 表示在另一个 resource 状态发生变化时（如文件被修改），在当前 resource 执行某动作。

#+begin_src ruby
subscribes :<action>, '<resource>[<name>]', :<timer>
  <action>   # 在当前 resource 执行的动作
  <resource> # 指定 resource 类型
  <name>     # 指定 resource 名
  <timer>
    :before    # 在指定 resource 状态发生变化前执行动作
    :delayed   # 在 Chef Client 运行结束前执行动作
    :immediate # 立即执行动作
#+end_src

** =bash=

执行 Bash 脚本。

#+begin_src ruby
bash '<name>' do
  action :run # 默认
         :nothing
  user '<user>' # 使用此用户运行脚本
  code '<script>'
  code <<-EOH
    <script>
  EOH
end
#+end_src

** =cookbook_file=

[[https://docs.chef.io/resource_cookbook_file.html][Chef Docs | cookbook_file Resource]]

=cookbook_file= 用于将 cookbook 内的文件复制到指定位置，文件只包含静态内容。

#+begin_src ruby
cookbook_file '<path>' do
  action :create  # 默认
  source '<file>' # Chef 在 files/ 目录下查找文件
end
#+end_src

** =directory=

[[https://docs.chef.io/resource_directory.html][Chef Docs | directory Resource]]

#+begin_src ruby
directory '<path>' do
  action :create # 默认
         :delete
  mode '<string>' # e.g. '0755'
  owner '<user>'
  group '<group>'
  recursive <bool>
end
#+end_src

** =execute=

[[https://docs.chef.io/resource_execute.html][Chef Docs | execute Resource]]

执行脚本，但不指定解析方式，由 Chef 决定如何执行。

#+begin_src ruby
execute '<name>' do
  action :run # 默认
         :nothing
  user '<username>'
  command '<script>'
  command <<-EOH
    <script>
  EOH
end
#+end_src

** =file=

[[https://docs.chef.io/resource_file.html][Chef Docs | file Resource]]

#+begin_src ruby
file '<path>' do
  action :create            # 默认
         :create_if_missing
         :delete
  content '<string>'
  owner '<string>'
  group '<string>'
end
#+end_src

** =group=

[[https://docs.chef.io/resource_group.html][Chef Docs | group Resource]]

#+begin_src ruby
group '<name>' do
  action :create # 默认
         :remove
         :modify
  members ['<user>', ...]
  append <bool> # true = 添加成员到组，不影响已有成员
                # false = 将组中已有成员移除，再添加成员到组。默认
end
#+end_src

** =package=

#+begin_src ruby
package '<name>' do
  action :install # 默认
         :remove
         :upgrade
         :nothing
end
#+end_src

** =remote_file=

[[https://docs.chef.io/resource_remote_file.html][Chef Docs | remote_file Resource]]

=remote_file= 用于获取远程文件并复制到指定位置。

#+begin_src ruby
remote_file '<path>' do
  action :create # 默认
  source '<string>'
end
#+end_src

** =service=

#+begin_src ruby
service '<name>' do
  action :enable
         :disable
         :start
         :stop
         :reload
         :restart
         :nothing # 默认
  action [:<action>, ...] # 多个 action，如 [:enable, :start]
end
#+end_src

** =template=

#+begin_src ruby
template '<path>' do
  action :create          # 默认
  source '<template>.erb' # Chef 在 templates/ 目录下查找模版文件
  variables(
    :<name> => <value>
  )
end
#+end_src

** =user=

[[https://docs.chef.io/resource_user.html][Chef Docs | user Resource]]

#+begin_src ruby
user '<name>' do
  action :create # 默认
         :remove
         :modify
  uid '<id>'
  gid '<id>'
  home '<path>'
  shell '<string>' # e.g. '/bin/bash'
  comment '<string>'
end
#+end_src

* Recipe

Recipe 是 Ruby 文件，包含一组 resource，resource 按照在 recipe 中出现的顺序被执行。Recipe 可以包含任意 Ruby 代码。

** =include_recipe=

引用其他 recipe。如果引用其他 cookbook 的 recipe，需要将引用的 cookbook 配置为依赖。

#+begin_src ruby
include_recipe '<cookbook>::<recipe>'
#+end_src

* Template

[[https://docs.chef.io/templates.html][Chef Docs | About Templates]] \\
[[https://docs.chef.io/resource_template.html][Chef Docs | Template Resource]]

Embedded Ruby (ERB) 模版是嵌入 Ruby 表达式的文本文件，在 recipe 中通过 =template= 资源引用模版，可以生成动态内容的文本文件。

#+begin_src erb
<% ... %>  // Statement, e.g. <% if ... %> 
<%= ... %> // Expression, e.g. <%= 1 + 2 %>

<%= node[...] %> // 
<%= @var %>      // Variable
#+end_src

* Cookbook

#+begin_src sh
<cookbook>/    # The cookbook directory
  .kitchen.yml # Kitchen config file
  Berksfile    # Cookbook dependencies
  chefignore   # Dirs and files to exclude from Chef, similar to gitignore
  metadata.rb  # Versions and dependencies
  README.md
  recipes/
    <recipe>.rb
    ...
  spec/
    unit/     # Unit tests
  test/       # Integration tests
#+end_src

** =metadata.rb=

#+begin_src ruby
version '<version>'                  # Cookbook 的版本
depends '<cookbook>', '~> <version>' # 依赖及依赖的版本
#+end_src

* Role

Role 用于管理节点需要运行的 recipe 列表，相对于手动添加 recipe 到节点的 run list，role 定义一个 recipe 列表，属于此 role 的节点会按顺序运行列表中的 recipe。

** 配置

Role 配置可以为 Ruby 或 JSON。

#+caption: =<repo>/roles/<role>.rb=
#+begin_src ruby
name '<name>'
description '<desc>'
run_list 'recipe[<cookbook>::<recipe>]',...
default_attributes # 设置 node 对象的属性
override_attributes({
  '<name>' => <value>
})
#+end_src

Role 可以通过 run-list 嵌套：

#+begin_src ruby
run_list 'role[base]',...
#+end_src

* Environment

[[https://docs.chef.io/environments.html][Chef Docs | About Environments]]

通过区分 Chef 资源所属的环境，可以实现不同的配置和行为，和运行同一 cookbook 的不同版本。Chef 资源默认属于 =_default= 环境。

** 配置

Environment 配置可以为 Ruby 或 JSON。

#+caption: =<repo>/environments/<env>.rb=
#+begin_src ruby
name '<name>'
description '<desc>'

# Cookbook 版本限制，如果为空则默认使用最新版本
cookbook '<cookbook>', '<version_expr>'
cookbook ...
#+end_src

* Ohai

[[https://docs.chef.io/ohai.html][Chef Docs | About Ohai]]

Ohai 在 Chef Client 运行时收集系统信息，如主机名、IP 地址等，并创建一个 =node= 对象提供给 recipe 使用。

** =node=

#+begin_src ruby
node['<attribute>']...
  ipaddress
  hostname
  memory
    total
#+end_src

在 recipe 中使用 =node= 对象：

#+begin_src ruby
file '/tmp/...' do
  content "Hostname is #{node['hostname']}"
end
#+end_src

* Test Kitchen

Test Kithen 用于集成测试，即创建一个实例（如虚拟机），在实例上运行指定 Chef reripe，然后运行测试代码检查实例的状态。

* ChefSpec

[[https://docs.chef.io/chefspec.html][Chef Docs | ChefSpec]]

ChefSpec 用于单元测试，即测试 Chef recipe 的编译结果 resource collection。

* Knife

[[https://docs.chef.io/knife.html][Chef Docs | Knife]]

Knife 是用于连接 Chef Server 的命令行工具。

* Berkshelf

[[https://docs.chef.io/berkshelf.html][Chef Docs | About Berkshelf]]

Berkshelf 是 Chef 的依赖管理器。

** 配置

在生成 cookbook 时 Chef 自动生成 Berkshelf 配置文件 =Berksfile= 。

#+caption: =<cookbook>/Berksfile=
#+begin_src sh
source '<url>' # 默认为 https://supermarket.chef.io
metadata # 在 metadata 文件中查找依赖和版本信息
#+end_src

安装依赖时 Berkshelf 自动生成 =Berkshelf.lock= 文件，记录依赖关系和版本信息。

** 依赖

Berkshelf 将依赖的 cookbook 安装在 =~/.berkshelf/cookbooks/= 目录下。

* =chef=
** =exec=

运行 ChefSpec：

#+begin_src sh
chef exec rspec <path_to_test>/<test>_spec.rb
#+end_src

** =generate=

#+begin_src sh
chef generate <type> <options>
#+end_src

*** =cookbook=

#+begin_src sh
chef generate cookbook <path> <options>
    <path> # e.g. cookbooks/mycookbook
#+end_src

*** =file=

#+begin_src sh
chef generate file <path> <name>
    <path> # Cookbook 的路径，不包含 files/
    <name>
#+end_src

*** =recipe=

#+begin_src sh
chef generate recipe <path> <name>
    <path> # Cookbook 的路径，不包含 recipes/
    <name> # 不包含 .rb
#+end_src

*** =template=

#+begin_src sh
chef generate template <path> <name> <options>
    <path> # Cookbook 的路径，不包含 templates/
#+end_src

* =chef-client=

#+begin_src sh
chef-client <options> <recipe>
    -r, --runlist
        "recipe[<cookbook>]"                      # 运行 default recipe
        "recipe[<cookbook>::<recipe>]"            # 运行一个 recipe
        "<cookbook>::<recipe>"                    # 只有一个 recipe 时可以省略 recipe[]
        "recipe[<cookbook>::<recipe>],recipe[..." # 运行多个 recipe，注意 runlist 不能包含空格
    -z, --local-mode # 本地模式，不依赖 Chef Server
    <recipe> # 执行 recipe 文件
#+end_src

* =ohai=

查看系统信息。

#+begin_src sh
ohai <attribute>/...
#+end_src

* =kitchen=

| *测试流程* | =create=   | 创建实例                  |
|            | =converge= | 使用 provisioner 配置实例 |
|            | =verify=   | 运行测试                  |
|            | =destroy=  | 销毁实例                  |
|------------+------------+---------------------------|
|            | =login=    | 登录到实例                |

* =knife=
** =bootstrap=

#+begin_src sh
knife bootstrap <fqdn> <options>
  -N, --node-name <name> # Node name
  -r, --run-list <list>  # Run list
    "recipe[<cookbook>]"
    "role[<name>]"
  -i <file>              # Identity file
  -x, --ssh-user <user>
  -P, --ssh-password <password>
  -p, --ssh-port <port>
  --sudo                 # Execute bootstrap with sudo
#+end_src

** =cookbook=

#+begin_src sh
knife cookbook
  list <options>            # Cookbook 列表
  show <cookbook> <version> # Cookbook 信息
  upload <cookbook>         # 上传 cookbook
#+end_src

** =data bag=

#+begin_src sh
knife data bag
  list                   # Data bag 列表
  show <bag>             # Data bag 信息
  show <bag>/<item>      # Data bag item 键名列表
  show <bag> <item>      # Data bag item 详细信息
    --secret-file <path> # 密钥文件，用于解密加密的 data bag item
  create <bag>           # 创建 data bag
    --secret-file <path> # 密钥文件，用于创建加密的 data bag
  from file <bag> <path> # 从 JSON 文件创建并上传 data bag item
    --secret-file <path> # 密钥文件，用于上传到加密的 data bag
#+end_src

** =environment=

#+begin_src sh
knife environment list             # 环境列表
knife environment show <env>       # 环境信息
knife environment from file <path> # 从文件创建或更新
#+end_src

** =node=

显示单个节点信息。

#+begin_src sh
knife node list <options> # Node 列表

knife node show <node> <options> # Node 信息
  -a, --attribute <attr>         # 属性，e.g. -a node

knife node run_list
  add <node> "recipe[<cookbook>],..." # 增加 run list
  set <node> "recipe[<cookbook>],..." # 设置 run list
  set <node> "role[<name>]"           # 设置 role

knife node environment
  set <node> <env> # 设置环境
#+end_src

** =role=

#+begin_src sh
knife role list             # Role 列表
knife role show <name>      # Role 信息
knife role from file <path> # 从文件创建或更新
#+end_src

** =search=

在 Chef Server 的索引中检索节点等信息。

#+begin_src sh
knife search <index> <query> <options>
  <index>
    client
    environment
    node
    role
    databag
  <query>
    "<attr>:<value> ..." # e.g. "role:web"
                         # e.g. "role:web AND recipes:apache"
    "*:*" # All
  <options>
    -a, --attribute <attr> # e.g. ipaddress
#+end_src

** =ssh=

SSH 连接到节点并运行命令。

#+begin_src sh
knife ssh <query> <command> <options>
  <query>
    <host>        # e.g. localhost
    <ip>          # e.g. 127.0.0.1    
    "*:*"         # 所有节点
    "role:<role>" # 属于 role 的节点 
  <options>
    -m, --manual-list # <query> 是手动的服务器名
    -p, --ssh-port <port>
    -x, --ssh-user <name>
    -i, --ssh-identity-file <path>
#+end_src

** =vault=

=chef-vault= 使用公钥加密 data bag item，拥有私钥的节点能够解密。

* =berks=
** =install=

#+begin_src sh
berks install # 安装依赖到本地
#+end_src

** =upload=

上传依赖到 Chef Server。

#+begin_src sh
berks upload <options>
  --force # 强制上传，默认只上传版本变化的 cookbook
#+end_src

* =cookstyle=

检查 recipe 语法和样式，基于 Ruby 静态分析器 [[https://github.com/rubocop-hq/rubocop][RuboCop]] 。

#+begin_src sh
cookstyle <options> <file> ...
#+end_src

* 链接

1. [[https://docs.chef.io/][Chef Docs]]
1. [[http://www.foodcritic.io/][Foodcritic]]
1. [[https://kitchen.ci/][Test Kitchen]]
1. [[https://www.inspec.io/][InSpec]]
1. [[https://supermarket.chef.io/][Chef Supermarket]]
