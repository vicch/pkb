#+SETUPFILE: ../../styles/readtheorg.setup
#+TITLE: DevOps Scrap

* Six Strategies for Application Deployment

[[https://thenewstack.io/deployment-strategies/][Source]]

#+ATTR_HTML: :class no-border
| *Recreate*    | Terminate version A, then roll out version B.                                            |
|---------------+------------------------------------------------------------------------------------------|
| *Ramped*      | Roll out version B gradually and replace version A.                                      |
|               | Also known as *rolling-update* or *incremental*.                                         |
|---------------+------------------------------------------------------------------------------------------|
| *Blue/Green*  | Release version B alongside version A, then switch traffic to version B.                 |
|---------------+------------------------------------------------------------------------------------------|
| *Canary*      | Release version B to a subset of users, then proceed to a full rollout.                  |
|---------------+------------------------------------------------------------------------------------------|
| *A/B Testing* | Release version B to a subset of users under specific condition.                         |
|---------------+------------------------------------------------------------------------------------------|
| *Shadow*      | Route real-world traffic to version B alongside version A but don't impact the response. |

** Kubernetes Setup

#+begin_src sh
# Start minikube
$ minikube start --memory 8192 --cpus 2

# Install (on Mac) and init Helm
$ brew install helm
$ helm init

# Add and update Helm repo
$ helm repo add stable https://kubernetes-charts.storage.googleapis.com/
$ helm repo update

# Install Prometheus and Grafana
$ kubectl create namespace monitoring
$ helm install prometheus stable/prometheus --namespace=monitoring
$ helm install grafana stable/grafana --namespace=monitoring --set=adminUser=admin --set=adminPassword=admin --set=service.type=NodePort

# Start Grafana service
$ minikube service grafana -n monitoring
#+end_src

1. Login to Grafana with both username and password =admin=.
2. Add a datasource:
   - Type: Prometheus
   - Name: Prometheus
   - URL: http://prometheus-server
   - Access: Server
3. Add a dashboard:
   - Visualization: Graph
   - Query: ~sum(rate(http_requests_total{app="my-app"}[5m])) by (version)~
   - Legend: ={{version}}=

** Recreate

The recreate strategy is a dummy deployment which consists of shutting down version A, then deploying version B after version A is turned off. This technique implies downtime of the service that depends on both shutdown and boot duration of the application.

file:../images/devops_scrap/01.gif

file:../images/devops_scrap/07.png

#+ATTR_HTML: :class no-border
| *Pros* | Easy to setup.                                                           |
|        | Application state is entirely renewed.                                   |
|--------+--------------------------------------------------------------------------|
| *Cons* | High impact on user, with downtime depending on shutdown and boot speed. |

** Ramped

The ramped strategy consists of rolling out a version of an application by replacing instances one by one, until all the instances are rolled out. It usually follows the following process:

1. With a pool of version A behind a load balancer, one instance of version B is deployed.
2. When the new instance's service is ready to accept traffic, the instance is added to the pool.
3. One instance of version A is removed from the pool and shut down.

Depending on the system taking care of the deployment, you can tweak the following parameters to increase the deployment time:

#+ATTR_HTML: :class no-border
| *Parallelism or max batch size* | Number of concurrent instances to roll out.                          |
|---------------------------------+----------------------------------------------------------------------|
| *Max surge*                     | Number of instances to add in addition to the current amount.        |
|---------------------------------+----------------------------------------------------------------------|
| *Max unavailable*               | Number of unavailable instances during the rolling update procedure. |

file:../images/devops_scrap/02.gif

file:../images/devops_scrap/08.png

#+ATTR_HTML: :class no-border
| *Pros* | Easy to set up.                                                               |
|        | Version is slowly released across instances.                                  |
|        | Convenient for stateful applications that can handle rebalancing of the data. |
|--------+-------------------------------------------------------------------------------|
| *Cons* | Rollout and rollback can take time.                                           |
|        | Supporting multiple APIs is hard.                                             |
|        | No control over traffic.                                                      |

** Blue/Green

The blue/green strategy differs from a ramped deployment: version B (green) is deployed alongside version A (blue) with exactly the same amount of instances. After testing that the new version meets all the requirements, the traffic is switched from version A to version B at the load balancer level.

file:../images/devops_scrap/03.gif

file:../images/devops_scrap/09.png

#+ATTR_HTML: :class no-border
| *Pros* | Instant rollout and rollback.                                              |
|        | Avoid versioning issue, the entire application state is changed in one go. |
|--------+----------------------------------------------------------------------------|
| *Cons* | Expensive as it requires double the resources.                             |
|        | Test of the entire platform should be done before releasing to production. |
|        | Handling stateful applications can be hard.                                |

** Canary

A canary deployment consists of gradually shifting production traffic from version A to version B. Usually the traffic is split based on weight. For example, 90 percent of the requests go to version A, 10 percent go to version B.

This technique is mostly used when tests are lacking or not reliable, or if there is little confidence about the stability of the new release on the platform.

file:../images/devops_scrap/04.gif

file:../images/devops_scrap/10.png

| *Pros* | New version is released for a subset of users.        |
|        | Convenient for error rate and performance monitoring. |
|        | Fast rollback.                                        |
|--------+-------------------------------------------------------|
| *Cons* | Slow rollout.                                         |

** A/B Testing

A/B testing deployment consists of routing a subset of users to a new functionality under specific conditions.

This technique is widely used to test conversion of a given feature and only roll-out the version that converts the most. It is usually a technique for making business decisions based on statistics, rather than a deployment strategy.

Here is a list of conditions that can be used to distribute traffic amongst the versions:

- Cookie
- Query parameters
- Geolocalisation
- Technology support: browser version, screen size, operating system, etc.
- Language

file:../images/devops_scrap/05.gif

file:../images/devops_scrap/11.png

#+ATTR_HTML: :class no-border
| *Pros* | Several versions run in parallel.                                                       |
|        | Full control over the traffic distribution.                                             |
|--------+-----------------------------------------------------------------------------------------|
| *Cons* | Requires intelligent load balancer.                                                     |
|        | Hard to troubleshoot errors for a given session, distributed tracing becomes mandatory. |

** Shadow

A shadow deployment consists of releasing version B alongside version A, fork version Aâ€™s incoming requests and send them to version B but without impacting production traffic. This is particularly useful to test production load on a new feature. A rollout of the application is triggered when stability and performance meet the requirements.

This technique is fairly complex to setup and needs special requirements, especially with egress traffic when calling external dependencies with mutable actions (email, bank, etc.). For example, given a shopping cart platform, to shadow test the payment service it can end-up having customers paying twice for their order. It can be solved by creating a mocking service that replicates the response from the provider.

file:../images/devops_scrap/06.gif

file:../images/devops_scrap/12.png

#+ATTR_HTML: :class no-border
| *Pros* | Performance testing with production traffic.                          |
|        | No impact on user.                                                    |
|        | No rollout until the stability and performance meet the requirements. |
|--------+-----------------------------------------------------------------------|
| *Cons* | Expensive as it requires double the resources.                        |
|        | Not a true user test and can be misleading.                           |
|        | Complex to setup.                                                     |
|        | Requires mocking service for certain cases.                           |

** Summary

When releasing to development/staging environments, a recreate or ramped deployment is usually a good choice. When it comes to production, a ramped or blue/green deployment is usually a good fit, but proper testing of the new platform is necessary.

If the application lacks in tests or if there is little confidence about the impact/stability of the software, then a canary, a/ b testing or shadow release can be used.

file:../images/devops_scrap/13.png

** Links

1. [[https://github.com/ContainerSolutions/k8s-deployment-strategies][GitHub | k8s-deployment-strategies]]
