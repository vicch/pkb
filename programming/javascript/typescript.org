#+setupfile: ../../styles/readtheorg.setup
#+title: TypeScript

* TypeScript

file:../images/typescript/01.png

TypeScript is a wrapper/superset of JavaScript. TypeScript code is compiled down to JavaScript code.

TypeScript is strongly typed and OO.

** Static Typing

Types are static in TypeScript: after declaring a variable as a certain type (implicitly or explicitly), the variable cannot be assigned with values of other types:

#+begin_src typescript
let foo = 'bar'; // Declare implicitly as string
foo = 1;         // Assign a number value, compiler error
#+end_src

* Type
** Number

[[http://www.typescriptlang.org/docs/handbook/basic-types.html#number][TypeScript | Handbook | Basic Types | Number]]

Numbers include both int and float:

#+begin_src typescript
let foo = 1;
let bar = 0.5;
#+end_src

** Array

[[http://www.typescriptlang.org/docs/handbook/basic-types.html#array][TypeScript | Handbook | Basic Types | Array]]

#+begin_src typescript
let foo = [1, 2, 3]; // Inferred as number[]
let foo: number[] = [1, 2, 3];
let foo: Array<number> = [1, 2, 3];

foo.push('bar'); // Error: string not assignable to type number
foo = ['bar'];   // Error: string[] not assignable to type number[]
#+end_src

** Tuple

[[http://www.typescriptlang.org/docs/handbook/basic-types.html#tuple][TypeScript | Handbook | Basic Types | Tuple]]

Tuple is basically an array whose elements can have different types.

#+begin_src typescript
let foo: [string, number];
foo = ["bar", 1];
foo = [1, "bar"]; // Compiler error
#+end_src

** Enum

[[http://www.typescriptlang.org/docs/handbook/basic-types.html#enum][TypeScript | Handbook | Basic Types | Enum]]

#+begin_src typescript
enum Foo {First, Second, Third} // Enum values start from 0 by default
let bar: Foo = Foo.First;  // bar == 0
let bar: Foo = Foo.Second; // bar == 1
let bar: Foo = Foo.Third;  // bar == 2

enum Foo {First, Second = 100, Third} // Change one default value, following values increment on the basis of it
let bar: Foo = Foo.First;  // bar == 0
let bar: Foo = Foo.Second; // bar == 100
let bar: Foo = Foo.Third;  // bar == 101
#+end_src

** Any

[[http://www.typescriptlang.org/docs/handbook/basic-types.html#any][TypeScript | Handbook | Basic Types | Any]]

#+begin_src typescript
let foo: any = 'bar';
foo = 1;
#+end_src

If a variable is declared without assigning any value, it is implicitly of type =any=, and can be assigned with any value:

#+begin_src typescript
let foo;
foo = 1;
foo = 'bar';
#+end_src

** Void

Void type functions don't return values:

#+begin_src typescript
function foo(): void {
}
#+end_src

** Null & Undefined

- [[http://www.typescriptlang.org/docs/handbook/basic-types.html#null-and-undefined][TypeScript | Handbook | Basic Types | Null and Undefined]]
- [[http://www.typescriptlang.org/docs/handbook/advanced-types.html#nullable-types][TypeScript | Handbook | Advanced Types | Nullable Types]]

=null= and =undefined= are both types and values:

#+begin_src typescript
let foo: null = null;
foo = 1; // Error, 1 is not assignable to type null
#+end_src

By default, =null= and =undefined= are valid values for any type:

#+begin_src typescript
let foo: string;
foo = null;      // OK
foo = undefined; // OK
#+end_src

To prevent =null= and =undefined= from being set to typed variables, set compiler option =strictNullChecks= to =true=:

#+begin_src typescript
// strictNullChecks set to true
let foo: string;
foo = null;      // Error
foo = undefined; // Error
#+end_src

To explicitly allow =null= values, use union type:

#+begin_src typescript
let foo: string | null | undefined;
foo = null;      // OK
foo = undefined; // OK
#+end_src

** Object

[[http://www.typescriptlang.org/docs/handbook/basic-types.html#object][TypeScript | Handbook | Basic Types | Object]]

#+begin_src typescript
let foo: { one: string, two: number }; // With prop names and types
let bar: { [s: string]: number };      // With prop name types and value types
#+end_src

An object once declared, the names and types of the properties are fixed:

#+begin_src typescript
let foo = { one: "bar", two: 1 };

foo = {};                     // Error: Type "{}" is missing the following properties
                              // from type "{ one: string; two: number; }": one, two
foo = { a: "bar", b: 1 };     // Error: Type "{ a: string; b: number; }" is not
                              // assignable to type "{ one: string; two: number; }"
foo = { two: 2, one: "bar" }; // Changing order of properties is OK
#+end_src

** Never

[[http://www.typescriptlang.org/docs/handbook/basic-types.html#never][TypeScript | Handbook | Basic Types | Never]]

=never= is the return type for a function that always throws an exception or never returns:

#+begin_src typescript
function error(message: string): never {
    throw new Error(message);
}
#+end_src

* Type Usage
** Assertion

#+begin_src typescript
if (typeof foo === "number") {
}
#+end_src

** Union

[[http://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types][TypeScript | Handbook | Advanced Types | Union Types]]

A union type describes a value that can be one of several types:

#+begin_src typescript
let foo: number | string | boolean = 1;
#+end_src

** Alias

[[http://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases][TypeScript | Handbook | Advanced Types | Type Aliases]]

Type aliases are names that refer to existing types:

#+begin_src typescript
type Name = string;
type NameResolver = () => string;
type NameOrResolver = Name | NameResolver;
function getName(n: NameOrResolver): Name {
  if (typeof n === "string") { return n; }
  else { return n(); }
}
#+end_src

Use type alias to define reusable complex types:

#+begin_src typescript
type Complex = {
  data: number[],
  output: (all: boolean) => number[]
};
function getData(arg: Complex) {
  return arg.data;
}
#+end_src

* Generic

[[http://www.typescriptlang.org/docs/handbook/generics.html][TypeScript | Handbook | Generics]]

To write flexible functions that take more than one type:

#+begin_src typescript
function foo(arg: any): any {} // Type "any" is too generic, argument type info
                               // is lost when using this function.
foo('bar');                    // OK, but we don't know the return type.

function foo<T>(arg: T): T {} // Using generic, function caller can pass the
                              // argument type to the function via T.
foo<string>('bar');           // We know return type is string.
foo('bar');                   // Use type inference.

function foo<T>(arg: T[]): T { // Generic type array
  return arg[0];
}
foo<string>(['bar']);

function foo<T, U>(arg: T): U {} // Multiple generic types
foo<string, number>('bar');      // We know return type is number
#+end_src

** Constraint

[[http://www.typescriptlang.org/docs/handbook/generics.html#generic-constraints][TypeScript | Handbook | Generics | Generic Constraints]]

#+begin_src typescript
function foo<T extends number>(arg: T): T {}
function foo<T extends number | string>(arg: T): T {}
#+end_src

** Generic Class

[[http://www.typescriptlang.org/docs/handbook/generics.html#generic-classes][TypeScript | Handbook | Generics | Generic Classes]]

#+begin_src typescript
class Tool<T> {
  combine: (a: T, b: T) => T;
}

let numberTool = new Tool<number>();
numberTool.combine = (a: number, b: number) => a + b;
numberTool.combine(1, 2);

let stringTool = new Tool<string>();
stringTool.combine = (a: string, b: string) => a + ' ' + b;
stringTool.combine('foo', 'bar');
#+end_src

* Function
** Function Type

[[http://www.typescriptlang.org/docs/handbook/functions.html#function-types][TypeScript | Handbook | Functions | Function Types]]

Function types act like variable types, functions of a certain type can be assigned to variables of the same type:

#+begin_src typescript
function foo(): number {return 1;}  // Type: () => number
function bar(): string {return '';} // Type: () => string

let a: () => number;
a = foo; // Ok
a = bar; // Compiler error
#+end_src

Function types can be assigned to object properties to make complex types that act like classes:

#+begin_src typescript
let foo: {
  one: number[],
  two: (arg: string) => string[]
};
#+end_src

** Argument Type

#+begin_src typescript
const foo = (arg: string) => arg;
foo('bar');

const foo = (arg: { name: string }) => arg.name;   // Requires to be an object with a prop "name",
const bar = { name: 'bar', desc: 'This is bar.' }; // There can be other props
foo(bar);
#+end_src

* Class

Class example:

#+begin_src typescript
class Greeter {
    message: string; // Member is public by default
    constructor(message: string) {
        this.message = message;
    }
    greet() {
        return 'Hello, ' + this.message;
    }
}
let greeter = new Greeter('world');
console.log(greeter.greet());
#+end_src

** Constructor

Adding access modifiers such as =public= to constructor parameter is a shortcut for setting that parameter to the class property:

#+begin_src typescript
class Foo {
  constructor(public bar: string) {
    // Implicit: this.bar = bar;
  }
}
#+end_src

** Accessor

[[http://www.typescriptlang.org/docs/handbook/classes.html#accessors][TypeScript | Handbook | Classes | Accessors]]

#+begin_src typescript
class Employee {
  private _fullName: string;
  get fullName(): string {
    return this._fullName;
  }
  set fullName(newName: string) {
    this._fullName = newName;
  }
}
#+end_src

** Readonly

[[http://www.typescriptlang.org/docs/handbook/classes.html#readonly-modifier][TypeScript | Handbook | Classes | Readonly Modifier]]

#+begin_src typescript
class Foo {
  constructor(public readonly bar: string) {}
}

let foo = new Foo('bar');
console.log(foo.bar); // Read is OK
foo.bar = 'new';      // Write is not allowed
#+end_src

** Inheritance

[[http://www.typescriptlang.org/docs/handbook/classes.html#inheritance][TypeScript | Handbook | Classes | Inheritance]]

#+begin_src typescript
class Foo {
  constructor(public x: string) {
  }
}

class Bar extends Foo {
  constructor(x: string, public y: number) {
    super(x + ' from Bar'); // Calls parent constructor
  }
}

let bar = new Bar('Hello', 1); // { x: 'Hello from Bar', y: 1 }
#+end_src

* Interface

[[http://www.typescriptlang.org/docs/handbook/interfaces.html][TypeScript | Handbook | Interfaces]]

Interface represents the requirements of what properties an object should have:

#+begin_src typescript
interface Foo {
  bar: string;
}

function exec(foo: Foo) {
  return foo.bar;
}
let one = { bar: 'one', x: '' };
exec(one);                   // OK
exec({ bar: 'one' });        // OK
exec({ bar: 'one', x: '' }); // Error: object literak can only have known prop

let two: Foo;
two = { bar: 'two' };        // OK
two = { bar: 'two', x: '' }; // Error: object literak can only have known prop
#+end_src

** Any Property

#+begin_src typescript
interface Foo {
  bar: string;
  [prop: string]: any; // Allows any additional property
}
#+end_src

** Optional Property

#+begin_src typescript
interface Foo {
  bar: string;
  extra?: number; // Optional property
}
#+end_src

** Function Property

#+begin_src typescript
interface Foo {
  bar: string;
  exec(v: number): string;
}
let one = {
  bar: 'one',
  exec(v: number) {
    return this.bar + ' = ' + v;
  }
};
one.exec(1); // one = 1
#+end_src

** Function Interface

Interface can define the type of a function:

#+begin_src typescript
interface Compare {
  (a: number, b: number): boolean;
}

let isBigger, isSmaller: Compare;
isBigger = (a: number, b: number) => (a > b);
isSmaller = (a: number, b: number) => (a < b);
#+end_src

** Implement Interface

Classes can implement interfaces:

#+begin_src typescript
interface Foo {
  bar: string;
  exec(v: number): string;
}
class MyFoo implements Foo {
  bar: string;
  extra: string; // Can have extra members
  exec(v: number) {
    return this.bar + ' = ' + v;
  }
}
let foo = new MyFoo();
foo.bar = 'one';
foo.exec(1); // one = 1
#+end_src

** Extend Interface

Interface can extend another interface:

#+begin_src typescript
interface Foo {
  name: string;
  exec(arg: number): void;
}
interface Bar extends Foo {
  desc: string;
}
#+end_src

* Namespace

[[http://www.typescriptlang.org/docs/handbook/namespaces.html][TypeScript | Handbook | Namespaces]]

Code can be organized into namespaces to avoid name collisions within the global namespace.

#+begin_src typescript
namespace Validation {
  const lettersRegexp = /^[A-Za-z]+$/;
  export function isLetters(s: string) { // Members must be exported to be accessible
    return lettersRegexp.test(s);
  }
}
console.log(Validation.isLetters('foo')); // Call function in namespace

let isLetters = (s: string) => false; // Function with same name in global namespace
console.log(isLetters('foo'));        // Call function in global namespace
#+end_src

** Alias

[[http://www.typescriptlang.org/docs/handbook/namespaces.html#aliases][TypeScript | Handbook | Namespaces | Aliases]]

Use aliases to keep namespaced keywords shorter:

#+begin_src typescript
namespace Foo {
  export class Bar {}
}
import Bar = Foo.Bar;
let bar = new Bar();
#+end_src

** Multiple Files

Namespace can exist across multiple files:

#+begin_src typescript
// letters.ts
namespace Validation {
  const lettersRegexp = /^[A-Za-z]+$/;
  export function isLetters(s: string) {
    return lettersRegexp.test(s);
  }
}

// numbers.ts
namespace Validation {
  const numbersRegexp = /^[0-9]+$/;
  export function isNumbers(s: string) {
    return numbersRegexp.test(s);
  }
}

// app.ts
// Import the namespace files
/// <reference path="letters.ts" />
/// <reference path="numbers.ts" />
console.log(Validation.isLetters('foo'));
console.log(Validation.isNumbers(123));
#+end_src

** Nested Namespace

Namespaces can be nested:

#+begin_src typescript
namespace Foo {
  export namespace Bar { // Namespace needs to be exported
    export const message = 'hello';
  }
}
console.log(Foo.Bar.message);
#+end_src

* Decorator

[[http://www.typescriptlang.org/docs/handbook/decorators.html][TypeScript | Handbook | Decorators]]

A decorator is an expression =@decorator= that can be attached to declarations of: class, method, accessor, property, parameter.

The expression =decorator= must evaluate to a function at runtime. Information of the decorated entity, e.g. class constructor, is passed to the function.

** Decorator Composition

Multiple decorator can be applied to one declaration:

#+begin_src typescript
function foo(constructor: Function) {
  console.log('This is foo.');
}
function bar(constructor: Function) {
  console.log('This is bar.');
}

@foo @bar
class Test {}

let test = new Test();
// This is bar. (Latest decorator runs first)
// This is foo.
#+end_src

** Decorator Factory

Decorator expressions doesn't need to be a function directly, it can be something that evaluates to a function:

#+begin_src typescript
function foo(constructor: Function) {}
function bar(constructor: Function) {}
function route(callFoo: boolean) {
  return callFoo ? foo : bar;
}

@route(true) // Evaluates to foo
class ClassOne {}

@route(false) // Evaluates to bar
class ClassTwo {}
#+end_src

** Class Decorator

Class decorator has one argument which is the constructor:

#+begin_src typescript
function foo(constructor: Function) {
  constructor.prototype.bar = 1;            // Add prop
  constructor.prototype.echo = function() { // Add method
    console.log(this.bar);
  }
}

@foo
class Test {}

let test = new Test();
test.echo(); // 1
#+end_src

** Method Decorator

Method decorator has 3 arguments:

- The class's constructor for a static method, or the class's prototype for a non-static method.
- The method's name.
- The method's property descriptor. [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty][MDN | JavaScript | Reference | Object | defineProperty]]

#+begin_src typescript
function setWritable(isWritable: boolean) {
  return function(target: any, name: string, descriptor: PropertyDescriptor) {
    descriptor.writable = isWritable;
  }
}

class Foo {
  @setWritable(true)
  getValue() { return 1; }
}

let foo = new Foo();
foo.getValue();         // 1
foo.getValue = () => 2; // OK: function is overwritten
foo.getValue();         // 2

class Bar {
  @setWritable(false)
  getValue() { return 1; }
}

let bar = new Bar();
bar.getValue();         // 1
bar.getValue = () => 2; // Error: cannot assign to read-only property
#+end_src

** Property Decorator

Property decorator has 2 arguments:

- The class's constructor for a static property, or the class's prototype for a non-static property.
- The property's name.

** Parameter Decorator

Parameter decorator has 3 arguments

- The class's constructor for a static method, or the class's prototype for a non-static method.
- The method's name.
- The parameter's ordinal index.

* Command
** Install

#+begin_src sh
npm install -g typescript
#+end_src

** =tsc=

#+begin_src sh
tsc <options> <file> ...
  --init               # Init config file
  -p, --project <path> # Specify path or directory of the config file
  -w, --watch          # Watch mode
  <file> ...           # Specify files to compile, ignore include/exclude settings
#+end_src

* Configuration
** =tsconfig.json=

Config file =tsconfig.json= is at the root of a TypeScript project. It specifies the root files and compiler options.

#+caption: =tsconfig.json=
#+begin_src js
{
  "compilerOptions": {
    <key>: <value>
  },
  "files": [ // Include files by absolute or relative paths
    <filename>
  ],
  "include": [ // Include files by pattern
    <pattern>
  ],
  "exclude": [ // Exclude files by pattern
    <pattern>
  ]
}
#+end_src

** Compiler Options

[[http://www.typescriptlang.org/docs/handbook/compiler-options.html][TypeScript | Handbook | Project Configuration | Compiler Options]]

*** =noEmitOnError=

By default, if there is error in the TypeScript code at compile time, e.g. type error, the compiler gives warnings, but still generates the target JavaScript code. This behavior can be changed by setting option =noEmitOnError= to =true=.

*** =noImplicitAny=

By setting compiler option =noImplicitAny= to =true=, compiler will warn about variables of implicit type =any=:

#+begin_src typescript
let foo; // Implicit type "any"
foo = 1;
#+end_src

*** =sourceMap=

By setting option =sourceMap= to =true=, compiler will generate a source map =.map= for the compiled =.js= file. With the source map, when debugging JavaScript in browser, breakpoints can be set on the source file =.ts=:

file:../images/typescript/02.png

*** =strictNullChecks=

By setting option =strictNullChecks= to =true=, compiler will warn about variables that are possibly unassigned with a value, i.e. having value =null=:

#+begin_src typescript
function foo(isTrue: boolean) {
  let bar: number;
  if (isTrue) {
    bar = 1; // This may not happen, "bar" will ends up null
  }
  return bar;
}
#+end_src

* Declaration

[[http://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html][TypeScript | Handbook | Declaration Files]]

* Links

- [[http://www.typescriptlang.org/docs/home.html][TypeScript | Documentation]]
- [[http://www.typescriptlang.org/play/index.html][TypeScript | Playground]]
- [[http://definitelytyped.org/][DefinitelyTyped]]
