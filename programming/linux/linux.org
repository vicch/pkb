#+SETUPFILE: ../../styles/readtheorg.setup
#+TITLE: Linux

* 内核
** 运行级别

#+ATTR_HTML: :class no-border
| *用户态* | 执行一般任务，如数学计算                         |
|----------+--------------------------------------------------|
| *内核态* | 对硬件外设进行操作，如读取磁盘文件、发送网络数据 |

*** 优势

- 安全性：进程必须通过内核提供的系统调用来操作硬件，所以不用担心应用程序对硬件进行非法操作。
- 简化开发模型：由于将底层的实现都封装在系统调用中，简化了用户态应用开发的难度。

*** 切换

进程切换到内核态通常有两种方式：

- 直接使用内核提供的系统调用（system call）。
- 使用 C 库函数（ =libc= ）封装的系统调用，即 C API。

file:../images/linux/04.png

* 进程
** 信号

| 值 | 信号      | 动作                   | 按键     | 描述                                           |
|----+-----------+------------------------+----------+------------------------------------------------|
|  1 | =SIGHUP=  | 挂起（hang up）        |          |                                                |
|----+-----------+------------------------+----------+------------------------------------------------|
|  2 | =SIGINT=  | 终止（interrupt）      | =Ctrl+C= |                                                |
|----+-----------+------------------------+----------+------------------------------------------------|
|  3 | =SIGQUIT= | 停止                   | =Ctrl+\= | 进行 core dump                                 |
|----+-----------+------------------------+----------+------------------------------------------------|
|  9 | =SIGKILL= | 无条件终止             |          | 无法捕获、忽略                                 |
|----+-----------+------------------------+----------+------------------------------------------------|
| 15 | =SIGTERM= | 终止                   |          | 可以捕获、忽略                                 |
|----+-----------+------------------------+----------+------------------------------------------------|
| 17 | =SIGSTOP= | 无条件停止             |          | 不终止                                         |
|----+-----------+------------------------+----------+------------------------------------------------|
| 18 | =SIGTSTP= | 暂停（temporary stop） | =Ctrl+Z= | 不终止（程序保留在内存，可以从停止的位置继续） |
|----+-----------+------------------------+----------+------------------------------------------------|
| 19 | =SIGCONT= | 继续                   |          |                                                |

** 权限

- 进程是作为特定用户和组运行的，核心进程通常作为 =root= 运行。
- 为了安全性，子进程会进行「降级」，比如 Apache 主进程作为 =root= 运行，而子进程作为其他用户运行。

** 调度优先级

- 系统内核将 CPU 时间轮流分配给每个进程，调度优先级决定分配给进程的时间总量。
- 数值为从 -20（最高） 到 +20（最低） 的整数。默认所有进程都以相同的优先级 0 启动。

** 系统调用

#+ATTR_HTML: :class no-border
| *fork* |                                                          |
|--------+----------------------------------------------------------|
| *exec* | 通知内核执行一个程序，这个程序将会替代正在被调用的程序。 |
|        | 新程序执行完成后，难以返回之前的程序。                   |

* 文件系统
** Glob

Shell 通过简单模式匹配文件和目录名的方式称为 globbing，Shell 将包含 glob 的参数替换为匹配的文件和目录名，这个过程称为扩展（expansion）。Shell 进行扩展是在运行具体命令之前，即 Shell 将扩展的结果作为参数传递给命令。

#+CAPTION: 示例
#+begin_src sh
$ echo .bash*
.bash_history  .bash_logout  .bashrc
#+end_src

#+CAPTION: 使用引号包围 glob 可以避免 Shell 进行扩展。
#+begin_src sh
$ echo .bash'*'
.bash*
#+end_src

#+CAPTION: 当 glob 无法匹配到任何结果时，Shell 直接输出 glob 字符串。
#+begin_src sh
$ echo notfound*
notfound*
#+end_src

#+CAPTION: Glob 不匹配 =.= 字符，需要显式使用 =.= 。
#+begin_src sh
$ echo .*
. .. .file
#+end_src

#+CAPTION: 避免匹配 =.= 和 =..= 。
#+begin_src sh
$ echo .[^.]*
.file
$ echo .??*
.file
#+end_src

** Inode

file:../images/linux/03.png

** 结构

#+begin_src sh
/
  bin/   # GNU 用户级工具
  boot/  # 启动文件
  dev/   # 设备节点
  etc/   # 系统配置文件
    group
    hosts
    inittab  # 系统运行级
    motd     # Message Of The Day，登录时显示的信息
    password
    profile
    shadow   # 密码
  home/  # 用户目录
  lib/   # 系统和应用程序的库文件
  media/ # 可移动媒体设备挂载点
  mnt/   # 可移动媒体设备挂载点
  opt/   # 可选软件包
  proc/
    loadavg # 系统负载和进程队列数据
    meminfo # 内存使用数据
  root/  # 根主目录
  sbin/  # GNU 管理员级工具
  tmp/   # 临时文件
  usr/   # 用户安装程序
    bin/       # 系统程序
    etc/       # 附加程序
    local/bin/ # 自定义命令和脚本
    share/
      dict/words # 字典文件
  var/   # 可变文件，如日志
#+end_src

* 流
** 输入

=Ctrl+D= 表示文件结束符。

* 用户、组

- 用户属于一个 primary 组，多个 secondary 组。
- 新建的用户默认属于与其同名的组。
- 新建的文件、目录默认属于创建者和创建者所属的组。

** =/etc/passwd=

存储已创建的用户的信息。

#+begin_src sh
<user>:<password>:<uid>:<gid>:<info>:<home_dir>:<shell>
    <password> # x 表示加密密码

# 示例
root:x:0:0:root:/root:/bin/bash
ubuntu:x:1001:1001:Ubuntu:/home/ubuntu:/bin/bash
#+end_src

* 权限

|     | 文件         | 目录                     |
|-----+--------------+--------------------------|
| =r= | 读文件       | 读目录内容               |
|-----+--------------+--------------------------|
| =w= | 写、删除文件 | 新建、重命名文件         |
|     |              | 新建、重命名、删除子目录 |
|-----+--------------+--------------------------|
| =x= | 执行文件     | 进入（ =cd= ）目录       |

- 执行脚本语言文件必须同时有 =r= 权限。

** Umask

|     | Read       | Write      | Execute    |
|-----+------------+------------+------------|
| =0= | \checkmark | \checkmark | \checkmark |
|-----+------------+------------+------------|
| =1= | \checkmark | \checkmark |            |
|-----+------------+------------+------------|
| =2= | \checkmark |            | \checkmark |
|-----+------------+------------+------------|
| =3= | \checkmark |            |            |
|-----+------------+------------+------------|
| =4= |            | \checkmark | \checkmark |
|-----+------------+------------+------------|
| =5= |            | \checkmark |            |
|-----+------------+------------+------------|
| =6= |            |            | \checkmark |
|-----+------------+------------+------------|
| =7= |            |            |            |

#+CAPTION: 执行权限只赋予新建的目录，不赋予新建的文件
#+begin_src sh
$ umask
0002
$ touch tmp
-rw-rw-r-- ...
$ mkdir tmp
drwxrwxr-x ...
#+end_src

** Sticky Bit

目录设置 sticky bit 后，目录下新建的文件和目录会继承此目录的所属组。

#+begin_src sh
$ mkdir foo
drwxrwxr-x ... root root ... foo/
$ chgrp foo foo
drwxrwxr-x ... root foo ... foo/
$ chmod g+s foo                  # 设置 sticky bit
drwxrwsr-x ... root foo ... foo/ # 组权限变为 rws
$ cd foo
$ touch bar
-rw-rw-r-- ... root foo ... bar  # 继承所属组 foo
#+end_src

* 启动
** 运行级

| 0 | 关机                                |
|---+-------------------------------------|
| 1 | 单用户模式                          |
|---+-------------------------------------|
| 2 | 多用户模式（无网络）                |
|---+-------------------------------------|
| 3 | 多用户模式（全功能）                |
|---+-------------------------------------|
| 4 | 可定义用户                          |
|---+-------------------------------------|
| 5 | 多用户模式（网络，图形化 X Window） |
|---+-------------------------------------|
| 6 | 重启                                |

不同的运行级启动不同的程序和脚本。

=/etc/inittab= 中列出系统的运行级，开机过程中会被读取。

** 开机运行

#+CAPTION: 系统开机运行脚本（发行版之间不同）
#+begin_src sh
/etc/rc<n>.d # n 为运行级，rc = run commands
/etc/init.d
/etc/init.d/rc.d
#+end_src

#+CAPTION: 本地自定义开机运行脚本（发行版之间不同）
#+begin_src sh
/etc/init.d/rc.local
/etc/init.d/boot.local
/etc/rc.d/rc.local
/etc/rc.local
#+end_src

** Shell 登录运行

| =~/.bash_profile= | 登录时（交互式 login 方式）运行一次                      |
|-------------------+----------------------------------------------------------|
| =~/.bashrc=       | 登录时及每次打开新 shell 时（交互式 non-login 方式）运行 |
|-------------------+----------------------------------------------------------|
| =~/.bash_logout=  | shell 退出时运行                                         |
* Shell
** 命令

|          |                                    | 示例      |
|----------+------------------------------------+-----------|
| 内部命令 | 不需要单独的进程来运行             | =cd=      |
|----------+------------------------------------+-----------|
| 外部命令 | 需要创建（fork）和执行一个子进程   | =/bin/ls= |
|          | 对应 =/bin= 或 =/usr/bin= 下的程序 |           |

file:../images/linux/01.svg

#+begin_src plantuml :file ../images/linux/01.svg :exports none
@startuml
!include ../../styles/plantuml-style

:输入命令;

if (绝对路径?) then (是)
else (否)
  if (内部命令?) then (是)
  else (否)
    :在搜索路径下查找同名程序或脚本;
  endif;
endif

:执行命令;

@enduml
#+end_src

** 变量

#+ATTR_HTML: :class no-border
| *Shell 变量* | 专属于 Shell 的临时变量，不能被 Shell 运行的命令使用。 |
|--------------+--------------------------------------------------------|
| *环境变量*   | 操作系统将 Shell 环境变量传递给 Shell 运行的命令。     |

*** Shell 变量

#+begin_src sh
$ <NAME>=<value>
$ echo $<NAME>
#+end_src

*** 环境变量

#+begin_src sh
$ <NAME>=<value>
$ export <NAME>
#+end_src

*** 环境变量列表

| =HOME= | Home 目录    |
|--------+--------------|
| =PATH= | 命令搜索路径 |

** 快捷键

| =Ctrl= =A= | 移动到行首         |
|------------+--------------------|
| =Ctrl= =E= | 移动到行尾         |
|------------+--------------------|
| =Ctrl= =W= | 剪切前一个词       |
|------------+--------------------|
| =Ctrl= =U= | 剪切行首到光标位置 |
|------------+--------------------|
| =Ctrl= =K= | 剪切光标位置到行尾 |
|------------+--------------------|
| =Ctrl= =Y= | 粘贴               |

* 环境
** 用户配置

| =~/.bashrc=       | 登录时自动运行，用于设定自定义环境变量等 |
|-------------------+---|
| =~/.profile=      |   |
|-------------------+---|
| =~/.bash_profile= |   |

*** =.bashrc=

#+CAPTION: 示例：SSH 连接时显示账号过期时间
#+begin_src sh
if [ "x${SSH_TTY}" != "x" ]; then
    chage -l <account> | grep "Account expires" | tr -d "\t"
fi
#+end_src

* 发行版

file:../images/linux/02.png

* 链接

1. [[http://linux.die.net/man/][Linux man pages]]
1. [[http://www.linfo.org/index.html][The Linux Information Project]]

-----

1. [[http://syscalls.kernelgrok.com/][Linux Syscall Reference]]
1. [[http://www.tutorialspoint.com/unix_system_calls/index.htm][Linux System Call]]

-----

1. [[http://www.pathname.com/fhs/pub/fhs-2.3.html][Filesystem Hierarchy Standard]]
