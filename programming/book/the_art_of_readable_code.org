#+SETUPFILE: ../../styles/readtheorg.setup
#+TITLE: The Art of Readable Code

* Preface

Most of our day-to-day lives as programmers are spent on the "basic" stuff, like naming variables, writing loops, and attacking problems down at the function level.

The concepts of readability are mostly language-independent.

* Chapter 1: Code Should Be Easy to Understand

Code should be easy to understand.

** The Fundamental Theorem of Readability

+Code should be written to minimize the time it would take for someone else to understand it.+ That "someone else" might be you six months later.

** Is Smaller Always Better?

#+CAPTION: Fewer lines isn't always better
#+begin_src java
assert((!(bucket = FindBucket(key))) || !bucket->IsOccupied());
// ->
bucket = FindBucket(key);
if (bucket != NULL) assert(!bucket->IsOccupied());
#+end_src

** Does Time-Till-Understanding Conflict with Other Goals?

Making code easy to understand often leads to code that is well architected and easy to test.

* Chapter 2: Packing Information into Names

+Pack information into names. Think of a name as a tiny comment.+

** Choose Specific Words

|             | *More specific*                                       |
|-------------+-------------------------------------------------------|
| =GetPage()= | =FetchPage()= =DownloadPage()=                        |
|-------------+-------------------------------------------------------|
| =Size()=    | =Height()= =NumNodes()= =MemoryBytes()=               |
|-------------+-------------------------------------------------------|
| =Stop()=    | =Kill()= (heavyweight operation that can't be undone) |
|             | =Pause()= (if there is a way to =Resume()=)           |

|       | *Alternatives*                                     |
|-------+----------------------------------------------------|
| send  | deliver, dispatch, announce, distribute, route     |
|-------+----------------------------------------------------|
| find  | search, extract, locate, recover                   |
|-------+----------------------------------------------------|
| start | launch, create, begin, open                        |
|-------+----------------------------------------------------|
| make  | create, set up, build, generate, compose, add, new |

It's better to be clear and precise than to be cute.

** Avoid Generic Names Like =tmp= and =retval=

+Pick a name that describes the entity's value or purpose.+

#+CAPTION: Announce the purpose of the variable upfront might help catch a bug.
#+begin_src java
retval += v[i];
// ->
sum_squares += v[i]; // Where's the square? Bug!
#+end_src

The name =tmp= should be used only in cases when being short-lived and temporary is the most important fact about that variable, for example, in the case of swapping two variables.

Names like =i=, =j=, =iter=, and =it= are commonly used as indices and loop iterators.

#+CAPTION: Sometimes more precise names are better for spotting bugs.
#+begin_src java
for (int i = 0; i < clubs.size(); i++)
    for (int j = 0; j < clubs[i].members.size(); j++)
        for (int k = 0; k < users.size(); k++)
            if (clubs[i].members[k] == users[j])
                cout << "user[" << j << "] is in club[" << i << "]" << endl;
// -> Use indexes ci, mi, ui
if (clubs[ci].members[ui] == users[mi]) // Bug! First letters don't match up.
if (clubs[ci].members[mi] == users[ui]) // OK. First letters match.
#+end_src
** Prefer Concrete Names over Abstract Names

Describe functions, variables concretely rather than abstractly.

#+CAPTION: In C++, to disallow default copy constructor and assignment operator of a class:
#+begin_src cpp
#define DISALLOW_EVIL_CONSTRUCTORS(ClassName) ...
// The word "evil" is not clear
// A better macro name:
#define DISALLOW_COPY_AND_ASSIGN(ClassName) ...
#+end_src

#+CAPTION: A command-line flag that prints debugging information but runs slowly, used when testing on a local machine:
#+begin_src sh
--run_locally
# To print debugging information remotely, Passing --run_locally is confusing
# A more explicit flag:
--extra_logging
#+end_src

Don't try to smash two orthogonal ideas into one to control both at once.

** Attaching Extra Information to a Name

Encode the units into the variable's name if it is a measurement:

| ~start = Date.getTime()~        | ~start_ms = Date.getTime()~        |
|---------------------------------+------------------------------------|
| =Start(int delay)=              | =Start(int delay_sec)=             |
|---------------------------------+------------------------------------|
| =CreateCache(int size)=         | =CreateCache(int size_mb)=         |
|---------------------------------+------------------------------------|
| =ThrottleDownload(float limit)= | =ThrottleDownload(float max_kbps)= |
|---------------------------------+------------------------------------|
| =Rotate(float angle)=           | =Rotate(float degree_cw)=          |

Attach extra information whenever there's something dangerous or surprising about the variable, especially where a bug can easily sneak in.

| *Situation*                                     | *Without extra info* | *With extra info*    |
|-------------------------------------------------+----------------------+----------------------|
| Retrieved data should be cleansed to be trusted | =msgbody=            | =unsafe_msgbody=     |
|                                                 |                      | =safe_msgbody=       |
|                                                 | =url=                | =untrusted_url=      |
|                                                 |                      | =trusted_url=        |
|-------------------------------------------------+----------------------+----------------------|
| Plaintext passwords should be encrypted         | =password=           | =plaintext_password= |
| before further processing                       |                      | =encrypted_password= |
|-------------------------------------------------+----------------------+----------------------|
| User-provided comment should be escaped         | =comment=            | =unescaped_comment=  |
| before being displayed                          |                      | =escaped_comment=    |
|-------------------------------------------------+----------------------+----------------------|
| Bytes of HTML have been converted to UTF-8      | =html=               | =html_utf8=          |
|-------------------------------------------------+----------------------+----------------------|
| Incoming data has been url encoded              | =data=               | =data_urlenc=        |

** How Long Should a Name Be?

#+CAPTION: Shorter names can be used for shorter scopes, where all information (variable type, initial value, how it's destroyed) is easy to see.
#+begin_src java
if (debug) {
    map<string,int> m;
    LookUpNamesNumbers(&m);
    Print(m);
}
#+end_src

If an identifier has a large scope, it needs to carry enough information to make it clear.

Project-specific abbreviations are usually a bad idea. If a new teammate understands what the name means, then it's probably OK.

#+CAPTION: Throw out unneeded words:
| =ConvertToString()= | =ToString()=   |

** Use Name Formatting to Convey Meaning

Follow naming conventions and be consistent. Use =UPPERCASE=, =CamelCase= and =_= to distinguish among constants, variables, functions, macros etc. 

* Chapter 3: Names That Can't Be Misconstrued

#+CAPTION: =filter()= is an ambiguous name:
| *Intended action* | *Better name* |
|-------------------+---------------|
| To pick out       | =select()=    |
|-------------------+---------------|
| To get rid of     | =exclude()=   |

-----

#+CAPTION: Rename a function that clips the contents of a paragraph:
#+begin_src python
def Clip(text, length):
# If it removes length from the end:
?
# If it truncates to a maximum length:
def Truncate(text, max_chars):
#+end_src

** Naming Limits

| Inclusive limits           | =min= =max=    |
|                            | =first= =last= |
|----------------------------+----------------|
| Inclusive/exclusive limits | =begin= =end=  |

#+CAPTION: Inclusive/exclusive limits example
#+begin_src python
# To print events that happened on October 16
PrintEventsInRange("OCT 16 12:00am", "OCT 17 12:00am") # Inclusive/exclusive limits
# is easier than
PrintEventsInRange("OCT 16 12:00am", "OCT 16 11:59:59.9999pm") # Inclusive limits
#+end_src

The word "end" is a still little ambiguous. Unfortunately, English doesn't have a succinct word for "just past the last value".

** Naming Booleans

Be sure it's clear what =true= and =false= really mean for a boolean.

#+CAPTION: Adding words like =is= , =has= , =can= , or =should= can make booleans more clear.
#+begin_src python
def SpaceLeft():    # Implying return a number
def HasSpaceLeft(): # Implying return a boolean
#+end_src

#+CAPTION: Avoid negated terms in a name.
#+begin_src python
disable_ssl = false; # Needs thinking
use_ssl = true;      # Easier to read
#+end_src

** Matching Expectations of Users

The prefix =get= implies a "lightweight accessors" that simply return an internal member. 

The method =list.size()= of C++ Standard Library seems to be a constant time operation, however it used to be an $O(n)$ operation. It would have been less confusing had it been named =countSize()= or =countElements()= .

** Evaluating Multiple Name Candidates

Imagine a config file for many objects. In a the "prototype inheritance" pattern, one object could reuse another object by referencing its =id=. This field could be named in multiple ways.

#+ATTR_HTML: :class no-border
| =template:<id>= | Not clear whether it's "a template" or "using this other template".                      |
|                 | A "template" is often something abstract that must be "filled in" before it is concrete. |
|-----------------+------------------------------------------------------------------------------------------|
| =reuse:<id>=    | Could mean "this object can be reused at most 100 times".                                |
|-----------------+------------------------------------------------------------------------------------------|
| =copy:<id>=     | Could mean "copy this 100 times" or "this is the 100th copy of something".               |
|-----------------+------------------------------------------------------------------------------------------|
| =inherit:<id>=  | The word "inherit" is familiar to most programmers.                                      |
|                 | It's understood that further modifications are made after inheritance.                   |
|                 | Can be improve to =inherit_from= .                                                       |
