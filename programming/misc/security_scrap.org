#+SETUPFILE: ../../styles/readtheorg.setup
#+TITLE: Security Scrap

* 密码学笔记

[[http://www.ruanyifeng.com/blog/2006/12/notes_on_cryptography.html][Source]]

加密方法可以分为两大类：一类是私钥加密（private key cryptography），一类是公钥加密（public key cryptography）。前者的加密和解密过程都用同一套密码，后者的加密和解密过程用的是两套密码。

历史上，人类传统的加密方法都是前一种，比如二战期间德军使用的 Enigma 电报密码。莫尔斯电码也可以看作是一种私钥加密方法。私钥加密的密钥只有一把，所以密钥的保存很重要。一旦密钥泄漏，密码也就被破解。

在公钥加密的情况下，密钥有两把：公开的公钥，和不公开的私钥。公钥加密的原理：

- 公钥和私钥是一一对应的。
- 所有的「公钥—私钥」对都是唯一的。
- 用公钥可以解开私钥加密的信息，反之亦成立。
- 同时生成公钥和私钥比较容易，但是从公钥推算出私钥，是很困难或者不可能的。

_目前，通用的私钥加密算法为 DES（Data Encryption Standard），通用的公钥加密算法为 RSA（ Rivest-Shamir-Adleman），_ 都产生于上世纪 70 年代。

在双钥体系中， _公钥用来加密信息，私钥用来数字签名。_

因为任何人都可以生成「公钥—私钥」对，为了防止散布伪造的公钥的行为，需要一个可靠的第三方机构来生成经过认证的「公钥—私钥」对。目前，世界上最主要的数字服务认证商是美国的 Verisign 公司，它的主要业务就是分发 RSA 数字证书。
* RSA 算法原理

[[http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html][Source]]

公钥加密算法是计算机通信安全的基石。

** 一点历史

1976 年以前，所有的加密方法都是同一种模式：

- 甲方选择某一种加密规则，对信息进行加密。
- 乙方使用同一种规则，对信息进行解密。

由于加密和解密使用同样规则（简称「密钥」），这被称为「对称加密算法」（symmetric-key algorithm）。这种加密模式有一个 _最大弱点：甲方必须把加密规则告诉乙方，否则无法解密。_ 保存和传递密钥，就成了最头疼的问题。

1976 年，两位美国计算机学家 Whitfield Diffie 和 Martin Hellman，提出了一种崭新构思，可以在不直接传递密钥的情况下，完成解密。这被称为 _Diffie-Hellman 密钥交换算法_ 。这个算法启发了其他科学家。人们认识到， _加密和解密可以使用不同的规则，只要这两种规则之间存在某种对应关系即可，这样就避免了直接传递密钥。_

这种新的加密模式被称为「非对称加密算法」：

- 乙方生成两把密钥：公钥是公开的，任何人都可以获得，私钥则是保密的。
- 甲方获取乙方的公钥，然后用它对信息加密。
- 乙方得到加密后的信息，用私钥解密。

1977 年，三位数学家 Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，叫做 _RSA 算法_ 。从那时直到现在，RSA 算法一直是最广为使用的非对称加密算法。毫不夸张地说，只要有计算机网络的地方，就有 RSA 算法。

这种算法非常可靠（[[http://en.wikipedia.org/wiki/RSA_Factoring_Challenge][RSA Factoring Challenge]]），密钥越长，就越难破解。根据已经披露的文献， _目前被破解的最长 RSA 密钥是 768 个二进制位。_ 也就是说，长度超过 768 位的密钥，还无法破解（至少没人公开宣布）。因此可以认为， _1024 位的 RSA 密钥基本安全，2048 位的密钥极其安全。_

RSA 算法并不难，只需要一点数论知识（[[http://jeremykun.com/2011/07/30/number-theory-a-primer/][Number Theory: A Primer]]）就可以理解。

** 互质关系

如果两个正整数，除了 1 以外，没有其他公因子，我们就称这两个数是互质关系（coprime）。比如，15 和 32 没有公因子，所以它们是互质关系。这说明，不是质数也可以构成互质关系。关于互质关系，不难得到以下结论：

- 任意两个质数构成互质关系。
- 一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系。
- 如果两个数之中，较大的那个数是质数，则两者构成互质关系。
- 1 和任意一个自然数是都是互质关系。
- 对大于 1 的整数 p，p 和 p-1 构成互质关系。
- 对大于 1 的奇数 p，p 和 p-2 构成互质关系。

** 欧拉函数

#+BEGIN_QUOTE
任意正整数 n，在小于等于 n 的正整数之中，有多少个与 n 构成互质关系？
#+END_QUOTE

计算这个值的方法就叫做 +欧拉函数+ ，以 $\varphi(n)$ 表示。在 1 到 8 之中，与 8 形成互质关系的是 1、3、5、7，所以 $\varphi(8) = 4$。$\varphi(n)$ 的计算方法并不复杂，但是为了得到最后那个公式，需要一步步讨论。

*** 推论一

$$\varphi(1) = 1$$

因为 1 与任何数（包括自身）都构成互质关系。

*** 推论二

如果 n 是质数，则

$$\varphi(n) = n - 1$$

因为质数与小于它的每一个数都构成互质关系。

*** 推论三

如果 $n = p^k$ (p 为质数，k 为大于等于 1 的整数)，则

$$\varphi(n) = p^k - p^{k-1} = p^k(1 - \frac{1}{p})$$

因为只有不是质数 p 的倍数，才可能与 n 互质。而质数 p 的倍数一共有 $p^{k-1}$ 个，即 $1 \times p, 2 \times p, \dots p^{k-1} \times p$，把它们去除，剩下的就是与 n 互质的数。

可以看出，第二种情况情况是 k = 1 时的特例。

*** 推论四

如果 n 可以分解成两个互质的整数之积 $n = p_1 \times p_2$，则

$$\varphi(n) = \varphi(p_1 p_2) = \varphi(p_1) \varphi(p_2)$$

即「积的欧拉函数等于各个因子的欧拉函数之积」。

这一条的证明要用到「中国剩余定理」，只简单说一下思路：如果 a 与 p1 互质（a < p1），b 与 p2 互质（b < p2），c 与 p1p2 互质（c < p1p2），则 c 与数对 (a,b) 是一一对应关系。由于 a 的值有 $\varphi(p_1)$ 种可能，b 的值有 $\varphi(p_2)$ 种可能，则数对 (a,b) 有 $\varphi(p_1) \varphi(p_2)$ 种可能，而 c 的值有 $\varphi(p_1p_2)$ 种可能，所以 $\varphi(p_1p_2) = \varphi(p_1) \varphi(p_2)$。

*** 结论

因为任意一个大于 1 的正整数，都可以写成多个质数的幂的积：$n = p_1^{k_1} p_2^{k_2} \ldots p_r^{k_r}$。根据推论四和推论三得到：

$$\begin{align} \varphi(n) & = \varphi(p_1^{k_1}) \varphi(p_2^{k_2}) \ldots \varphi(p_r^{k_r}) \\ & = p_1^{k_1} p_2^{k_2} \ldots p_r^{k_r} (1 - \frac{1}{p_1}) (1 - \frac{1}{p_2}) \ldots (1 - \frac{1}{p_r}) \\ & = n (1 - \frac{1}{p_1}) (1 - \frac{1}{p_2}) \ldots (1 - \frac{1}{p_r}) \end{align}$$

这就是欧拉函数的通用计算公式。比如，1323 的欧拉函数，计算过程如下：

$$\varphi(1323) = \varphi(3^3 \times 7^2) = 1323 (1 - \frac{1}{3}) (1 - \frac{1}{7}) = 756$$

** 欧拉定理

欧拉函数的用处，在于 +欧拉定理+ ：如果两个正整数 a 和 n 互质，则 n 的欧拉函数可以让下面的等式成立：

$$a^{\varphi(n)} \equiv 1 \pmod{n}$$

也就是说，$a^{\varphi(n)}$ 被 n 除的余数为 1。或者说，$a^{\varphi(n)} - 1$ 可以被 n 整除。比如，3 和 7 互质，而 7 的欧拉函数等于 6，所以 3 的 6 次方 729 减去1，可以被 7 整除。

欧拉定理可以大大简化某些运算。比如，7 和 10 互质，根据欧拉定理，$7^{\varphi(10)} \equiv 1 \pmod{10}$ ，已知 $\varphi(10) = 4$，所以马上得到 7 的 4 倍数次方的个位数肯定是 1，因此，7 的任意次方的个位数心算就可以算出来。 _欧拉定理是 RSA 算法的核心。_ 理解了这个定理，就可以理解 RSA。

欧拉定理有一个特殊情况，假设正整数 a 与质数 p 互质，因为 $\varphi(p) = p - 1$，则欧拉定理可以写成：

$$a^{p-1} \equiv 1 \pmod{p}$$

这就是著名的 +费马小定理+ 。它是欧拉定理的特例。

** 模反元素

如果两个正整数 a 和 n 互质，那么一定可以找到整数 b，使得：

$$ab \equiv 1 \pmod{n}$$

b 就叫做 a 的「模反元素」。比如，3 和 11互质，那么 3 的模反元素就是 4，因为 $3 \times 4 - 1 = 11$。显然，模反元素不止一个，4 加减 11 的整数倍都是 3 的模反元素：… -18，-7，4，15，26 …，即如果 b 是 a 的模反元素，则 b+kn 都是 a 的模反元素。

欧拉定理可以用来证明模反元素必然存在：

$$a^{\varphi(n)} = a \times a^{\varphi(n)-1} \equiv 1 \pmod{n}$$

可以看到，$a^{\varphi(n)-1}$ 就是 a 的模反元素。

** 密钥生成的步骤

通过一个例子，来理解 RSA 算法。假设 A 要与 B 进行加密通信，A 该怎么生成公钥和私钥呢？

第一步，随机选择 _两个不相等的质数 p 和 q_ 。实际应用中，这两个质数越大，就越难破解。A 选择了 61 和 53。

第二步，计算 _p 和 q 的乘积 n_ = 61 x 53 = 3233， _n 的长度就是密钥长度。_ 3233 写成二进制是 110010100001，一共有 12 位，所以这个密钥就是 12 位。实际应用中，RSA 密钥一般是 1024 位，重要场合则为 2048 位。

第三步，计算 _n 的欧拉函数_ 。$\varphi(3233) = \varphi(61) \varphi(53) = (61 - 1) (53 - 1) = 3120$

第四步，随机选择一个 _整数 e，条件是 $1 < e < \varphi(n)$，且 e 与 $\varphi(n)$ 互质_ 。实际应用中，常常选择 65537。A 选择了 17。

第五步，计算 _e 对于 $\varphi(n)$ 的模反元素 d，使得 $ed \equiv 1 \pmod{\varphi(n)}$，_ 实质上就是对下面这个二元一次方程求解：

$$ex + \varphi(n)y = 1$$

这个方程可以用「扩展欧几里得算法」求解，此处省略具体过程。A 算出一组整数解为 (2753, -15)，即 d = 2753。

第六步， _将 n 和 e 封装成公钥，n 和 d 封装成私钥。_ 例子中，n = 3233，e = 17，d = 2753，所以公钥就是 (3233, 17)，私钥就是（3233, 2753）。实际应用中，公钥和私钥的数据都采用 ASN.1 格式表达。

** RSA 算法的可靠性

回顾上面的密钥生成步骤，一共出现 6 个数字：p，q，n，$\varphi(n)$，e，d。这 6 个数字之中，公钥用到了 n 和 e，其余 4 个数字都是不公开的。其中最关键的是 d，因为 n 和 d 组成了私钥，一旦 d 泄漏，就等于私钥泄漏。

那么，有无可能在已知 n 和 e 的情况下，推导出 d？

- $ed \equiv 1 \pmod{\varphi(n)}$，只有知道 e 和 $\varphi(n)$，才能算出 d。
- $\varphi(n) = (p - 1) (q - 1)$，只有知道 p 和 q，才能算出 $\varphi(n)$。
- $n = pq$，只有将 n 因数分解，才能得到 p 和 q。

可是， _大整数的因数分解，是一件非常困难的事情。目前除了暴力破解，还没有发现别的有效方法。_ 维基百科这样写道：

#+BEGIN_QUOTE
对极大整数做因数分解的难度决定了 RSA 算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法，那么 RSA 的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的 RSA 密钥才可能被暴力破解。到 2008 年为止，世界上还没有任何可靠的攻击 RSA 算法的方式。 _只要密钥长度足够长，用 RSA 加密的信息实际上是不能被解破的。_
#+END_QUOTE

#+CAPTION: 举例来说，可以对 3233 进行因数分解，但是没法对下面这个整数进行因数分解：
#+begin_src code
12301866845301177551304949
58384962720772853569595334
79219732245215172640050726
36575187452021997864693899
56474942774063845925192557
32630345373154826850791702
61221429134616704292143116
02221240479274737794080665
351419597459856902143413
#+end_src

#+CAPTION: 它等于这样两个质数的乘积：
#+begin_src code
33478071698956898786044169
84821269081770479498371376
85689124313889828837938780
02287614711652531743087737
814467999489
x
36746043666799590428244633
79962795263227915816434308
76426760322838157396665112
79233373417143396810270092
798736308917
#+end_src

这大概是人类已经分解的最大整数（232 个十进制位，768 个二进制位）。比它更大的因数分解，还没有被报道过，因此目前被破解的最长 RSA 密钥就是 768 位（[[http://eprint.iacr.org/2010/006.pdf][Factorization of a 768-bit RSA modulus]]）。

** 加密和解密
*** 使用公钥 (n, e) 加密

假设 B 要向 A 发送加密信息 m，他就要用 A 的公钥 (n, e) 对 m 进行加密。这里需要注意，m 必须是整数（字符串可以取 ASCII 值或 Unicode 值），且 m 必须小于 n。所谓「加密」，就是算出下式的 c：

$$m^e \equiv c \pmod{n}$$

A的公钥是 (3233, 17)，B 的 m 假设是 65，那么可以算出：$65^{17} \equiv 2790 \pmod{3233}$，于是，B 就把 2790 发给 A。

*** 使用私钥 (n, d) 解密

A 得到 B 发来的 2790 以后，就用私钥 (3233, 2753) 进行解密。可以证明，下面的等式一定成立：

$$c^d \equiv m \pmod{n}$$

那么，A 计算出 $2790^{2753} \equiv 65 \pmod{3233}$，因此 A 知道了 B 加密前的原文是 65。

可以看到，如果不知道 d，就没有办法从 c 求出 m。而前面已经说过，要知道 d 就必须分解 n，这是极难做到的，所以 RSA 算法保证了通信安全。

公钥 (n, e) 只能加密小于 n 的整数 m，如果要加密大于 n 的整数，该怎么办？有两种解决方法：

- 把长信息分割成若干段短消息，每段分别加密。
- 先选择一种「对称性加密算法」，比如 DES，用这种算法的密钥加密信息，再用 RSA 公钥加密 DES 密钥。

** 私钥解密的证明

为什么用私钥解密，一定可以正确地得到 m，需要证明 $c^d \equiv m \pmod{n}$。

#+ATTR_HTML: :class no-border
| 根据加密规则：          | $m^e \equiv c \pmod{n}$                    |
|-------------------------+--------------------------------------------|
| 于是，c 可以写成：      | $c = m^e - kn$                             |
|-------------------------+--------------------------------------------|
| 将 c 代入待证明的式子： | $(m^e - kn)^d \equiv m \pmod{n}$           |
|-------------------------+--------------------------------------------|
| 等同于求证：            | _$m^{ed} \equiv m \pmod{n}$_               |
|-------------------------+--------------------------------------------|
| 由于模反元素 d 满足：   | $ed \equiv 1 \pmod{\varphi(n)}$            |
|-------------------------+--------------------------------------------|
| 即：                    | $ed = h \varphi(n) + 1$                    |
|-------------------------+--------------------------------------------|
| 将 ed 代入：            | $m^{h \varphi(n) + 1} \equiv m \pmod{n}$   |

接下来，分成两种情况证明上面这个式子。

*** m 与 n 互质

#+ATTR_HTML: :class no-border
| 根据欧拉定理，此时： | $m^{\varphi(n)} \equiv 1 \pmod{n}$                |
|----------------------+---------------------------------------------------|
| 得到：               | $(m^{\varphi(n)})^h \times m \equiv m \pmod{n}$   |

原式得证。

*** m 与 n 不互质

由于 n 等于质数 p 和 q 的乘积，所以 m 必然等于 kp 或 kq。以 m = kp 为例，考虑到这时 k 与 q 必然互质，则：

#+ATTR_HTML: :class no-border
| 根据欧拉定理可得：  | $(kp)^{q-1} \equiv 1 \pmod{q}$                         |
|---------------------+--------------------------------------------------------|
| 进一步得到：        | $((kp)^{q-1})^{h(p-1)} \times kp \equiv kp \pmod{q}$   |
|---------------------+--------------------------------------------------------|
| 即：                | $(kp)^{ed} \equiv kp \pmod {q}$                        |
|---------------------+--------------------------------------------------------|
| 将它改写成：        | $(kp)^{ed} = tq + kp$                                  |
|---------------------+--------------------------------------------------------|
| t 必然是 p 的倍数： | $t = t'p$                                              |
|---------------------+--------------------------------------------------------|
| 于是：              | $(kp)^{ed} = t'pq + kp$                                |
|---------------------+--------------------------------------------------------|
| 因为：              | $m = kp, n = pq$                                       |
|---------------------+--------------------------------------------------------|
| 所以：              | $m^{ed} \equiv m \pmod{n}$                             |

原式得证。

* DDoS - Impossible to stop?

[[http://security.stackexchange.com/questions/33811/ddos-impossible-to-stop][Source]]

Imagine a shopping mall. _By definition, anybody can enter the mall and then browse the shops. It is public. The shops are expecting people to come by, look at the displays, maybe enter and then buy things._

In the mall, there is a shopkeeper, who sells, say, computers. Let's call him Jim. He wants people to come by and see the computers and be enticed into buying them. Jim is the nice guy in our story.

Let there be Bob. Bob is a disgruntled nihilist who hates Jim. Bob would go to great lengths to make Jim unhappy, e.g. disrupting Jim's business. Bob does not have many friends, but he is smart, in his own twisted way. One day, Bob spends some money to make the local newspaper publish an ad; the ad states, in big fonts and vivid colours, that Jim runs a great promotion at the occasion of his shop's tenth birthday: the first one hundred customers who enter the shop will receive a free iPad. In order to cover his tracks, Bob performs his dealings with the newspaper under the pseudonym of "bob" (which is his name, but spelled backwards).

The next day, of course, the poor Jim is submerged by people who want a free iPad. The crowd clogs Jim's shop but also a substantial part of the mall, which becomes full of disappointed persons who begin to understand that there is no such thing as a free iPad. _Their negativeness makes them unlikely to buy anything else, and in any way they cannot move because of the press of the crowd, so business in the mall stops altogether._ Jim becomes highly unpopular, with the ex-iPad-cravers, but also with his shopkeeper colleagues. Bob sniggers.

At this point, Jim contacts the mall manager Sarah. Sarah decides to handle the emergency by calling the firemen. The firemen come with their shining helmets, flashing trucks, screaming sirens and sharp axes, and soon convince the crowd to disperse. Then, Sarah calls her friend Gunther. Gunther is a son of German immigrants, a pure product of the US Melting Pot, but more importantly he is a FBI agent, in charge of the issue. Gunther is smart, in his own twisted way. He contacts the newspaper, and is first puzzled, but then has an intuitive revelation: ah-HA! "bob" is just "Bob" spelled backwards ! Gunther promptly proceeds to arrest Bob and send him meet his grim but legal fate before the county Judge.

Finally, in order to avoid further issues with other nihilists who would not be sufficiently deterred by the vision of Bob's dismembered corpse put on display in front of the mall, Sarah devises a mitigation measure: she hires Henry and Herbert, two mean-looking muscular young men, and posts them at the mall entries. Henry and Herbert are responsible for blocking access should a large number of people try to come in, beyond a given threshold. If a proto-Bob strikes again, this will allow the management of the problem on the outside, in the parking lot, where space is not lacking and crowd control much easier.

-----

*Morality:* _a DDoS cannot be prevented, but its consequences can be mitigated by putting proactive measures_, and perpetrators might be deterred through the usual, historically-approved display of muscle from law enforcement agencies. If botnets become too easy to rent, predictable consequences include increased police involvement, proactive authentication of users at infrastructure level, shutting off of the most disreputable parts of the network (in particular Internet access for the less cooperative countries), and a heavy dose of disgruntlement and sadness at the loss of a past, more civilized age.
* Why are DDoS attacks so hard to stop?

[[http://www.pcgamer.com/why-are-ddos-attacks-so-hard-to-stop/][Source]]

#+BEGIN_QUOTE
I saw that Quake Live was down because of a DDoS attack. It seems like this happens to games all the time... so I don't understand why it can't be stopped. Will this madness ever end? ĄŞ Tom
#+END_QUOTE

It is madness, Tom, and it ought to end... but it isn't likely to anytime soon. _Distributed denial-of-service attacks can be mitigated, sometimes without any downtime, but they're really hard to beat altogether._

To quickly make sense of it, here's a real world analogy: If I'm running a Starbucks and someone sneaks in, dodges the security cameras and steals all the stupid flavored syrups, that was a preventable security breach. However, if 200 non-customers enter my store at the same time and block all the real customers from ordering, that's a DDoS attack. Now I have to figure out who the real customers are and shoo all the fake customers out the door, and that's going to take time. No stupid sugar coffee for anyone.

That's grossly simplified, but the idea is the same when attacking servers: _overload the target with fake data so that it can't attend to real users._ The least sophisticated version of a denial-of-service attack would have one computer firing away at the target server without any attempt to mix up its identity, and that's not hard to stop: just block all data from that address. _A distributed denial-of-service attack, however, can fire away from thousands of infected computers all over the world, collectively referred to as a botnet._

In my research I spoke to StrataFusion partner Mark Egan, co-author of The Executive Guide to Information Security, who explained that _owners of major botnets simply rent them out._ Want to take down EverQuest for some moronic reason? All you have to do is pay.

There are ways to mitigate DDoS attacks, and all kinds of services which offer such security, but no perfect solution. Egan explained that static content is a little easier to protect, as services like Akamai spread the data over thousands of severs, creating a big target. He suspects, however, that the dynamic nature of games makes them good targets.

One way or another, to end a DDoS attack and keep a game server operational, the hostile traffic must be filtered out. _One method is to 'teach' a system what good traffic looks like so that it can identify bad traffic_, Egan explained, but even a well-protected server can be brought down while the attack is mitigated. "If a very determined bad guy aims at you, they've got a pretty good chance [of causing an outage]," he said.

There are some very determined bad guys out there, though they may balk at the "bad" part. It has been argued that DDoS attacks should be considered a form of legal protest, the same as gathering in the streets. To decide if that can ever be a valid argument would be too much for this column's scope, but it's a pretty big stretch when it comes to game servers. No one fills the streets because they're mad at EA. And either way, the law certainly isn't having the protest angle: in the US, UK, and other countries, DoS attacks are a crime which can result in prison sentences... if you can catch the person responsible. That's not easy.

The perpetrators of these attacks can be anywhere in the world, and the owner of the botnet could be anywhere else in the world. " _Very few people get caught_," said Egan. And while DDoS attacks can be very bad for a company, Egan says _the main focus in the security world is on preventing theft. A service outage is inconvenient, but stolen credit cards are far more damaging._

I asked Egan if he thought it would get better, but he isn't optimistic. " _Each side will continue to up their game a bit," he said, meaning that more sophisticated security will only lead to more sophisticated attacks._ It sounds terribly fatalistic, but all we can do is hope game services are prepared to respond quickly with strong DDoS mitigation techniques. Even then, we may still be locked out of the games we want to play now and then, because some idiots just hate fun.

* Someone Is Learning How to Take Down the Internet

[[https://www.schneier.com/blog/archives/2016/09/someone_is_lear.html][Source]]

Over the past year or two, someone has been probing the defenses of the companies that run critical pieces of the Internet. These probes take the form of precisely calibrated attacks designed to determine exactly how well these companies can defend themselves, and what would be required to take them down. We don't know who is doing this, but it feels like a large nation state. China or Russia would be my first guesses.

First, a little background. _If you want to take a network off the Internet, the easiest way to do it is with a distributed denial-of-service attack (DDoS)._ Like the name says, this is an attack designed to prevent legitimate users from getting to the site. There are subtleties, but _basically it means blasting so much data at the site that it's overwhelmed._ These attacks are not new: hackers do this to sites they don't like, and criminals have done it as a method of extortion. _There is an entire industry, with an arsenal of technologies, devoted to DDoS defense. But largely it's a matter of bandwidth. If the attacker has a bigger fire hose of data than the defender has, the attacker wins._

Recently, some of the major companies that provide the basic infrastructure that makes the Internet work have seen an increase in DDoS attacks against them. Moreover, they have seen a certain profile of attacks. These attacks are significantly larger than the ones they're used to seeing. They last longer. They're more sophisticated. And _they look like probing. One week, the attack would start at a particular level of attack and slowly ramp up before stopping. The next week, it would start at that higher point and continue._ And so on, along those lines, _as if the attacker were looking for the exact point of failure._

The attacks are also configured in such a way as to see what the company's total defenses are. _There are many different ways to launch a DDoS attack. The more attack vectors you employ simultaneously, the more different defenses the defender has to counter with._ These companies are seeing more attacks using three or four different vectors. This means that the companies have to use everything they've got to defend themselves. They can't hold anything back. They're forced to demonstrate their defense capabilities for the attacker.

I am unable to give details, because these companies spoke with me under condition of anonymity. But this all is consistent with what Verisign is reporting. Verisign is the registrar for many popular top-level Internet domains, like .com and .net. If it goes down, there's a global blackout of all websites and e-mail addresses in the most common top-level domains. Every quarter, Verisign publishes a DDoS trends report. While its publication doesn't have the level of detail I heard from the companies I spoke with, the trends are the same: "in Q2 2016, attacks continued to become more frequent, persistent, and complex."

There's more. One company told me about a variety of probing attacks in addition to the DDoS attacks: testing the ability to manipulate Internet addresses and routes, seeing how long it takes the defenders to respond, and so on. _Someone is extensively testing the core defensive capabilities of the companies that provide critical Internet services._

Who would do this? It doesn't seem like something an activist, criminal, or researcher would do. _Profiling core infrastructure is common practice in espionage and intelligence gathering._ It's not normal for companies to do that. Furthermore, _the size and scale of these probes -- and especially their persistence -- points to state actors. It feels like a nation's military cybercommand trying to calibrate its weaponry in the case of cyberwar._ It reminds me of the US's Cold War program of flying high-altitude planes over the Soviet Union to force their air-defense systems to turn on, to map their capabilities.

_What can we do about this? Nothing, really. We don't know where the attacks come from._ The data I see suggests China, an assessment shared by the people I spoke with. On the other hand, _it's possible to disguise the country of origin for these sorts of attacks._ _The NSA, which has more surveillance in the Internet backbone than everyone else combined, probably has a better idea, but unless the US decides to make an international incident over this, we won't see any attribution._h

But this is happening. And people should know.
