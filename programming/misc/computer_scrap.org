#+SETUPFILE: ../../styles/readtheorg.setup
#+TITLE: Computer Scrap

* 计算机是如何启动的？
** Boot 的含义

Boot 原来的意思是靴子，「启动」与靴子有什么关系呢？ 原来，这里的 boot 是 bootstrap（鞋带）的缩写，它来自一句谚语「pull oneself up by one's bootstraps」，字面意思是「拽着鞋带把自己拉起来」，这当然是不可能的事情。最早的时候，工程师们用它来比喻， _计算机启动是一个很矛盾的过程：必须先运行程序，然后计算机才能启动，但是计算机不启动就无法运行程序！_ 必须想尽各种办法，把一小段程序装进内存，然后计算机才能正常运行。所以，工程师们把这个过程叫做「拉鞋带」，久而久之就简称为 boot 了。

** 第一阶段：BIOS

上个世纪 70 年代初，只读内存（read-only memory，缩写为 ROM）发明， _开机程序被刷入 ROM 芯片，计算机通电后，第一件事就是读取它。_ 这块芯片里的程序叫做「基本输入输出系统」（Basic Input/Output System），简称为 BIOS。

*** 上电自检

_BIOS 程序首先检查计算机硬件能否满足运行的基本条件，这叫做「上电自检」（Power-On Self-Test），_ 缩写为 POST。如果硬件出现问题，主板会发出不同含义的[[http://en.wikipedia.org/wiki/Power-on_self-test#Original_IBM_POST_beep_codes][蜂鸣]] ，启动中止。如果没有问题，屏幕就会显示出 CPU、内存、硬盘等信息。

*** 启动顺序

硬件自检完成后， _BIOS 把控制权转交给下一阶段的启动程序。_ 这时，BIOS 需要知道，「下一阶段的启动程序」具体存放在哪一个设备。也就是说，BIOS _需要有一个外部储存设备的排序，_ 排在前面的设备就是优先转交控制权的设备。这种排序叫做「启动顺序」（boot sequence）。打开 BIOS 的操作界面，里面有一项就是「设定启动顺序」。

** 第二阶段：主引导记录

BIOS 按照「启动顺序」，把控制权转交给排在第一位的储存设备。这时， _计算机读取该设备的第一个扇区（512 个字节），如果最后两个字节是 =0x55= 和 =0xAA= ，表明这个设备可以用于启动；_ 如果不是，表明设备不能用于启动，控制权于是被转交给「启动顺序」中的下一个设备。 _最前面的 512 个字节，就叫做「主引导记录」（Master Boot Record，缩写为 MBR）。_

「主引导记录」的主要作用是告诉计算机在硬盘的哪一个位置去找操作系统。主引导记录由三个部分组成：

| 1 ~ 446 字节   | 调用操作系统的机器码                 |
|----------------+--------------------------------------|
| 447 ~ 510 字节 | 分区表（partition table）            |
|----------------+--------------------------------------|
| 511 ~ 512 字节 | 主引导记录签名（ =0x55= 和 =0xAA= ） |

*** 分区表

考虑到每个区可以安装不同的操作系统，「主引导记录」因此必须知道将控制权转交给哪个区。分区表的长度只有 64 字节，里面又分成 4 项，每项 16 字节。所以， _一个硬盘最多只能分 4 个一级分区，又叫做「主分区」。_

#+CAPTION: 每个主分区由 6 个部分组成：
| 1 字节       | 如果为 =0x80= ，表示该主分区是激活分区，控制权要转交给这个分区 |
|              | 4 个主分区只能有一个是激活的                                   |
|--------------+----------------------------------------------------------------|
| 2 ~ 4 字节   | 主分区第一个扇区的物理位置（柱面、磁头、扇区号等）             |
|--------------+----------------------------------------------------------------|
| 5 字节       | [[https://en.wikipedia.org/wiki/Partition_type][主分区类型]]                                                     |
|--------------+----------------------------------------------------------------|
| 6 ~ 8 字节   | 主分区最后一个扇区的物理位置                                   |
|--------------+----------------------------------------------------------------|
| 9 ~ 12 字节  | 主分区第一个扇区的逻辑地址                                     |
|--------------+----------------------------------------------------------------|
| 13 ~ 16 字节 | 主分区的扇区总数                                               |

「主分区的扇区总数」决定了这个主分区的长度，也就是说， _一个主分区的扇区总数最多不超过 2 的 32 次方。如果每个扇区为 512 个字节，就意味着单个分区最大不超过 2TB。再考虑到扇区的逻辑地址也是 32 位，所以单个硬盘可利用的空间最大也不超过 2TB。_ 如果想使用更大的硬盘，只有 2 个方法：一是提高每个扇区的字节数，二是[[http://en.wikipedia.org/wiki/GUID_Partition_Table][增加扇区总数]]。

** 第三阶段：硬盘启动

这时，计算机的控制权就要转交给硬盘的某个分区了，又分成三种情况。

*** 卷引导记录

4 个主分区里面，只有一个是激活的。计算机会读取激活分区的第一个扇区，叫做「卷引导记录」（Volume Boot Record，缩写为 VBR）。「卷引导记录」的主要作用是告诉计算机，操作系统在这个分区里的位置。然后，计算机就会加载操作系统。

*** 扩展分区和逻辑分区

随着硬盘越来越大，4 个主分区已经不够了，需要更多的分区。但是，分区表只有 4 项，因此规定 _有且仅有一个区可以被定义成「扩展分区」（extended partition），这个区里面又分成多个区，叫做「逻辑分区」（logical partition）。_

计算机先读取扩展分区的第一个扇区，叫做「扩展引导记录」（Extended Boot Record，缩写为 EBR）。里面也包含一张 64 字节的分区表，但是最多只有两项（也就是两个逻辑分区）。

计算机接着读取第二个逻辑分区的第一个扇区，再从里面的分区表中找到第三个逻辑分区的位置，以此类推，直到某个逻辑分区的分区表只包含它自身为止（即只有一个分区项）。因此，扩展分区可以包含无数个逻辑分区。但是，似乎很少通过这种方式启动操作系统。如果操作系统确实安装在扩展分区，一般采用下一种方式启动。

*** 启动管理器

在这种情况下，计算机读取「主引导记录」前面 446 字节的机器码之后，不再把控制权转交给某一个分区，而是运行事先安装的「启动管理器」（boot loader），由用户选择启动哪一个操作系统。Linux 环境中，目前最流行的启动管理器是 +Grub+ 。

** 第四阶段：操作系统

控制权转交给操作系统后，操作系统的内核首先被载入内存。

以 Linux 系统为例，先载入 =/boot= 目录下面的 =kernel= 。内核加载成功后，第一个运行的程序是 =/sbin/init= 。它根据配置文件（Debian 系统是 =/etc/initab= ）产生 init 进程。这是 Linux 启动后的第一个进程，pid 进程编号为 1，其他进程都是它的后代。然后，init 线程加载系统的各个模块，比如窗口程序和网络程序，直至执行 =/bin/login= 程序，跳出登录界面，等待用户输入用户名和密码。

至此，全部启动过程完成。
* 为什么主引导记录的内存地址是 =0x7C00= ？

[[http://www.ruanyifeng.com/blog/2015/09/0x7c00.html][Source]]

《计算机原理》课本说，启动时，主引导记录会存入内存地址 =0x7C00= 。为什么不存入内存的头部、尾部、或者其他位置，而偏偏存入这个比 32KB 小 1024 字节的地方？我读到一篇 [[http://www.glamenv-septzen.net/en/view/6][The mysteries arround "0x7C00" in x86 architecture bios bootloader]]，终于解开了这个谜。

file:../images/computer_scrap/02.png

简单说，计算机启动是这样一个过程：

- 通电
- 读取 ROM 里面的 BIOS，用来检查硬件
- BIOS 根据指定的顺序，检查引导设备的第一个扇区，即主引导记录，加载在内存地址 =0x7C00=
- 主引导记录把操作权交给操作系统

所以， _主引导记录就是引导操作系统进入内存的一段小程序，大小不超过 1 个扇区（512 字节）。_

=0x7C00= 这个地址 _来自 Intel 的第一代个人电脑芯片 8088，以后的 CPU 为了保持兼容，一直使用这个地址。_

1981 年 8 月，IBM 公司最早的个人电脑 IBM PC 5150 上市，就使用了这个芯片。当时搭配的操作系统是 86-DOS。这个操作系统需要的内存最少是 32KB。我们知道，内存地址从 =0x0000= 开始编号，32KB 的内存就是 =0x0000= ～ =0x7FFF= 。8088 芯片本身需要占用 =0x0000= ～ =0x03FF= ，用来保存各种中断处理程序（[[https://en.wikipedia.org/wiki/BIOS_interrupt_call][BIOS interrupt call]]）的储存位置。（主引导记录本身就是中断信号 =INT 19h= 的处理程序。）所以，内存只剩下 =0x0400= ～ =0x7FFF= 可以使用。

_为了把尽量多的连续内存留给操作系统，主引导记录就被放到了内存地址的尾部。_ 由于一个扇区是 512 字节，主引导记录本身也会产生数据，需要另外留出 512 字节保存。所以，它的预留位置就变成了 =0x7FFF= - 1024 + 1 = =0x7C00= 。

#+CAPTION: 计算机启动后，32KB 内存的使用情况如下：
#+begin_src code
+--------------------+ 0x0
| Interrupts vectors |
|--------------------| 0x400
| BIOS data area     |
|--------------------| 0x5??
| OS load area       |
|--------------------| 0x7C00
| Boot sector        |
|--------------------| 0x7E00
| Boot data/stack    |
|--------------------| 0x7FFF
| (not used)         |
+--------------------+ (...)
#+end_src

* 为什么寄存器比内存快？

file:../images/computer_scrap/01.jpg

计算机的存储层次（[[https://en.wikipedia.org/wiki/Memory_hierarchy][memory hierarchy]]）之中，寄存器（register）最快，内存其次，最慢的是硬盘。同样都是晶体管存储设备，为什么寄存器比内存快呢？Mike Ash 写了一篇很好的解释 [[http://www.mikeash.com/pyblog/friday-qa-2013-10-11-why-registers-are-fast-and-ram-is-slow.html][Why Registers Are Fast and RAM Is Slow]]，非常通俗地回答了这个问题，有助于加深对硬件的理解。

** 原因一：距离不同

内存离 CPU 比较远，所以要耗费更长的时间读取。以 3GHz 的 CPU 为例，电流每秒钟可以振荡 30 亿次，每次耗时大约为 0.33 纳秒。光在 1 纳秒的时间内，可以前进 30 厘米。也就是说， _在 CPU 的一个时钟周期内，光可以前进 10 厘米。因此，如果内存距离 CPU 超过 5 厘米，就不可能在一个时钟周期内完成数据的读取，_ 这还没有考虑硬件的限制和电流实际上达不到光速。相比之下，寄存器在 CPU 内部，当然读起来会快一点。

距离对于桌面电脑影响很大， _对于手机影响就要小得多。手机 CPU 的时钟频率比较慢（iPhone 5s 为1.3GHz），而且手机的内存紧挨着 CPU。_

** 原因二：硬件设计不同

苹果公司新推出的 iPhone 5s，CPU 是 A7，寄存器有 6000 多位（31 个 64 位寄存器加 32 个 128 位寄存器）。而 iPhone 5s 的内存是 1GB，约为 80 亿位。这意味着，高性能、高成本、高耗电的设计可以用在寄存器上，反正只有 6000 多位，而不能用在内存上。因为每个位的成本和能耗只要增加一点点，就会被放大 80 亿倍。

事实上确实如此， _内存的设计相对简单，每个位就是一个电容和一个晶体管，而寄存器的设计则完全不同，多出好几个电子元件。_ 并且通电以后，寄存器的晶体管一直有电，而内存的晶体管只有用到的才有电，没用到的就没电，这样有利于省电。这些设计上的因素，决定了寄存器比内存读取速度更快。

** 原因三：工作方式不同

寄存器的工作方式很简单，只有两步：

1. 找到相关的位。
2. 读取这些位。

内存的工作方式就要复杂得多：

1. 找到数据的指针（指针可能存放在寄存器内，所以这一步就已经包括寄存器的全部工作了）。
2. 将指针送往内存管理单元（MMU），由 MMU 将虚拟的内存地址翻译成实际的物理地址。
3. 将物理地址送往内存控制器（memory controller），由内存控制器找出该地址在哪一根内存插槽（bank）上。
4. 确定数据在哪一个内存块（chunk）上，从该块读取数据。
5. 数据先送回内存控制器，再送回 CPU，然后开始使用。

每一步都会产生延迟，累积起来就使得内存比寄存器慢得多。为了缓解寄存器与内存之间的巨大速度差异，硬件设计师做出了许多努力，包括 _在 CPU 内部设置缓存_ 、优化 CPU 工作方式，尽量一次性从内存读取指令所要用到的全部数据等等。
