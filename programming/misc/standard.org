#+setupfile: ../../styles/readtheorg.setup
#+title: Standard

* 字符集

|                     | 字节数 | 格式                                  | 字符                                      |
|---------------------+--------+---------------------------------------+-------------------------------------------|
| ASCII               |      1 | =0XXXXXXX= 第一位为 =0=               | 128 个字符（包括 32 个不可打印字符）      |
|---------------------+--------+---------------------------------------+-------------------------------------------|
| 非 ASCII 单字节编码 |      1 | =0XXXXXXX= 第一位为 =0=               | ASCII 字符                                |
|                     |        | =1XXXXXXX= 第一位为 =1=               | 各语言的特殊字符（不同语言编码方式不同）  |
|---------------------+--------+---------------------------------------+-------------------------------------------|
| UTF-8               |  1 ~ 4 | =0XXXXXXX=                            | =0000 0000 - 0000 007F= （同 ASCII 字符） |
|                     |        | =110XXXXX 10XXXXXX=                   | =0000 0080 - 0000 07FF=                   |
|                     |        | =1110XXXX 10XXXXXX 10XXXXXX=          | =0000 0800 - 0000 FFFF=                   |
|                     |        | =11110XXX 10XXXXXX 10XXXXXX 10XXXXXX= | =0001 0000 - 0010 FFFF=                   |
|---------------------+--------+---------------------------------------+-------------------------------------------|
| GB2312              |      2 |                                       | 65536 个字符                              |
|---------------------+--------+---------------------------------------+-------------------------------------------|
| UCS-2               |      2 |                                       |                                           |
|---------------------+--------+---------------------------------------+-------------------------------------------|
| Base64              |  6 bit |                                       | 64 个可打印字符                           |

- Unicode :: 设计用于收录世界上所有符号的编码方式，解决写入和解读方式不同造成的乱码问题。
           - 只规定了每个符号的二进制代码，而没有规定如何存储（如字节长度），可以有多种实现方式。

- UTF-8 :: 使用最广的 Unicode 实现方式。
         - 一种变长的编码方式，根据不同的符号而变化字节长度。
         - N 字节字符：第一个字节前 N 位为 =1= ，第 N+1 位为 =0= ，后面的字节前两位为 =10= 。

- Unicode 转 UTF-8 :: 根据 Unicode 编码，判断字节长度。
                    - 从最低位起，将二进制编码填充进 UTF-8 的可用位置（ =X= ）。


- UCS-2 :: Unicode 的一种实现方式。
         - 编码的高字节在前时为 big endian，低字节在前时为 little endian。


- Base64 :: 用于在通常处理文本数据的场合，表示、传输、存储二进制数据。

-----

- ANSI :: 英文文件使用 ASCII
        - 简体中文使用 GB2312
        - 繁体中文使用 BIG5

- Windows 下判断编码的方式 :: FF FE 开头，UCS-2 big endian 编码
                            - FE FF 开头，UCS-2 little endian 编码
                            - EF BB BF 开头，UTF-8 编码
                            - 默认为 ANSI 编码

* POSIX

- POSIX 系统 :: Unix、Linux、Mac OS X、BSD 等。

* JSON

JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式，常用于 Ajax。JSON 比 XML 简单，在浏览器中处理的速度更快，适合表现对象图（object graph）。

** 历史

21 世纪初，Douglas Crockford 寻找一种简便的数据交换格式，能够在服务器之间交换数据。当时通用的数据交换语言是 XML，但是 Douglas Crockford 觉得 XML 的生成和解析都太麻烦，所以他提出了一种简化格式，也就是 JSON。

JSON 的规格非常简单，只用几百个字就能说清楚，而且 Douglas Crockford 声称这个规格永远不必升级，因为该规定的都规定了。

** 语法

JSON 语法是 JavaScript 对象表示语法的子集。

| 并列数据的分隔       | @@html:<code>,</code>@@ |
|----------------------+-------------------------|
| 并列数据集合（数组） | =[]=                    |
|----------------------+-------------------------|
| 映射                 | =:=                     |
|----------------------+-------------------------|
| 映射集合（对象）     | ={}=                    |

#+caption: 示例
#+begin_src js
{
    "name": int,
    "name": "string",
    "name": true,
    "name": [array],
    "name": {object},
    "name": null,
}
#+end_src

* JSONP

JSONP (JSON with Padding) 是一种大多数浏览器支持的标准跨域数据访问方式。根据同源策略，一个域的网页不能同其他域的服务器通信。但 =<script>= 元素的跨域特性，允许网页获取其他来源动态产生的 JSON 数据，这个模式就是 JSONP。

JSONP 返回的不是 JSON，而是 JavaScript 调用，用 JavaScript 直译器执行而不是用 JSON 解析器解析。

JSONP 可以通过 JavaScript callback 的形式实现调用。客户端在调用 JSONP 服务时，URL 参数中包含一个 callback 函数名。

* MessagePack

- 序列化库，性能和占用空间优于 JSON。
- 序列化结果为二进制格式。

* YAML

YAML 是专用于配置文件的语言。

[[http://www.ruanyifeng.com/blog/2016/07/yaml.html][YAML 语言教程]]

* PB

- PB (Protocol Buffer) :: Google 开发的数据交换格式，独立于语言、平台。
                        - 采用二进制格式，比使用 XML 进行数据交换快。
                        - 可用于分布式应用之间的数据通信，或者异构网络环境下的数据交换。
                        - 可用于网络传输、配置文件、数据存储等诸多领域。
