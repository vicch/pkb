#+setupfile: ../../styles/readtheorg.setup
#+title: Java

* Type
** Numeric
*** Integer

[[https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Integer.html][java.base | java.land.Integer]]

| *Type*  | *Byte* |                      *Min* |                     *Max* | *Default Value* |
|         |        |                        <r> |                       <r> |             <r> |
|---------+--------+----------------------------+---------------------------+-----------------|
| =byte=  |      1 |                       -128 |                       127 |               0 |
|---------+--------+----------------------------+---------------------------+-----------------|
| =short= |      2 |                    -32,768 |                    32,767 |               0 |
|---------+--------+----------------------------+---------------------------+-----------------|
| =int=   |      4 |             -2,147,483,648 |             2,147,483,647 |               0 |
|---------+--------+----------------------------+---------------------------+-----------------|
| =long=  |      8 | -9,223,372,036,854,775,808 | 9,223,372,036,854,775,807 |              0L |

*** Float

[[https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Float.html][java.base | java.lang.Float]]

| *Type*   | *Byte* |                     *Min* |                         *Max* | *Default Value* |
|          |        |                       <r> |                           <r> |             <r> |
|----------+--------+---------------------------+-------------------------------+-----------------|
| =float=  |      4 |                $2^{-149}$ |  $(2-2^{-23}) \times 2^{127}$ |            0.0f |
|          |        |        =0x0.000002P-126f= |            =0x1.fffffeP+127f= |                 |
|----------+--------+---------------------------+-------------------------------+-----------------|
| =double= |      8 |               $2^{-1074}$ | $(2-2^{-52}) \times 2^{1023}$ |            0.0d |
|          |        | =0x0.0000000000001P-1022= |     =0x1.fffffffffffffP+1023= |                 |

*** Suffix

Integer values are treated as =int= by default, unless suffixed by =L= for =long=:

#+begin_src java
long foo = 100000L;
#+end_src

Floating point values are treated as =double= by default, unless suffixed by =F= or =f= for =float=:

#+begin_src java
float foo = 234.5F;
#+end_src

*** Underscore

[[https://docs.oracle.com/javase/8/docs/technotes/guides/language/underscores-literals.html][Java Documentation | Underscores in Numeric Literals]]

#+begin_src java
Integer foo = 1000000;
Integer bar = 1_000_000;
#+end_src

** Character

16-bit unsigned integer value used to store Unicode character.

#+begin_src java
char foo = 'A';
char bar; // Empty value is \u0000
#+end_src

** String

#+begin_src java
String foo = "bar";
String foo = "bar" + " " + "bar";
#+end_src

** Array

#+begin_src java
int[] foo = new int[10];      // Size must be decided
String bar[] = new String[5]; // [] can be after type or var name

int[] foo = new int[]{1, 2, 3};
String[] bar = new String[]{"a", "b", "c"};

int[] foo = {1, 2, 3};
String bar[] = {"a", "b", "c"};

for (int i = 0; i < foo.length; i++) {}
for (String i : bar) {}

int[] foo() {
    return new int[]{1, 2, 3};
}
#+end_src

** Enum

[[https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html][Java Documentation | Enum Types]]

* Type Usage
** Casting

#+begin_src java
int foo = (int) bar;
#+end_src

** Conversion

Conversion methods exist for different types, e.g.:

#+begin_src java
int foo = Integer.parseInt("123");
String bar = Integer.toString(123);
#+end_src

* Variable
** Syntax

#+begin_src java
int foo;
int foo, bar;
int foo = 1;
int foo = 1, bar = 2;
#+end_src

** =final=

Final variables can't be reassigned.

#+begin_src java
final int foo;

final int bar;
bar = 1; // Can be intialized after definition

String s;
final int l = s.length(); // Use "final" to indicate the value is immutable
#+end_src

* Statement
** =for=

#+begin_src java
for (int i = 0; i < 10; i++) {}

int[] nums = {1, 2, 3};
for (int n : nums) {}
#+end_src

** =break=

Break multiple loops:

#+begin_src java
outer:
for (int i = 0; i < 10; i++) {
    for (int j = 0; j < 10; j++) {
        if (i == 5 && j == 5) {
            break outer;
        }
    }
}
#+end_src

** =try=
*** =try= with Resource

If a resource type implements =AutoClosable= interface, it can be initialized within the =try= statement. The resource is guaranteed to be closed if any exception is thrown from the =try= block. This is equivalent to (but less verbose than) the =finally= syntax.

If multiple resources are initialized, the first initialized resource will be closed lastly.

**** Example

Define 2 resource types:

#+begin_src java
public abstract class Resource implements AutoCloseable {

    protected abstract String getName();

    public Resource() {
        System.out.println("Creating " + getName());
    }

    public void use() throws Exception {
        System.out.println("Using " + getName());
        throw new Exception("Throwing exception on " + getName());
    }

    @Override
    public void close() {
        System.out.println("Closing " + getName());
    }
}

public class FooResource extends Resource {

    @Override
    protected String getName() { return "foo"; }
}

public class BarResource extends Resource {

    @Override
    protected String getName() { return "bar"; }
}
#+end_src

Init the resource object in =try= statement:

#+begin_src java
try (
        FooResource foo = new FooResource();
        BarResource bar = new BarResource()
) {
    foo.use();
    bar.use();
} catch (Exception e) {
    System.out.println(e.getMessage());
}
#+end_src

Output:

#+begin_src sh
Creating foo
Creating bar
Using foo   # Throws exception on foo, bar is never used
Closing bar # Last initialized resource is closed first
Closing foo
Throwing exception on foo
#+end_src

* Method
** =main()=

#+begin_src java
public static void main(String[] args) {}
#+end_src

* OOP
** Property

[[https://docs.oracle.com/javase/tutorial/java/javaOO/variables.html][The Java Tutorials | Classes and Objects | Declaring Member Variables]]

#+begin_src java
<access> [static] <type> <name> [= <value>];
#+end_src

#+begin_src java
public static int capacity = 10;
private boolean isFull;
#+end_src

** Constructor
*** =this()=

Explicit constructor invocation: inside one constructor, calling another constructor (of the same class) using =this()=.

#+begin_src java
public class Rectangle {
    private int x, y;
    private int width, height;

    public Rectangle() {
        this(0, 0, 1, 1);
    }
    public Rectangle(int width, int height) {
        this(0, 0, width, height);
    }
    public Rectangle(int x, int y, int width, int height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
}
#+end_src

*** Implicit Constructor

If a class has no constructor, Java compiler will implicit generate a constructor.

** Initialization Block

[[https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html][The Java Tutorials | Classes and Objects | Initializing Fields]]

#+begin_src java
{
    // Initialization code
}
#+end_src

Content of initilization block is copied into every contructor (and placed before the contructor code) by compiler.

An alternative is to use a private (or protected) final method:

#+begin_src java
private Type var = initVar();
private final Type initVar() { ... }
#+end_src

** Static Initialization Block

[[https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html][The Java Tutorials | Classes and Objects | Initializing Fields]]

#+begin_src java
static {
    // Initialization code
}
#+end_src

An alternative is to use a private static method:

#+begin_src java
private static Type var = initVar();
private static Type initVar() { ... }
#+end_src

* Functional Programming
** Functional Interface

[[https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#approach6][The Java Tutorials | Classes and Objects | Lambda Expressions | Use Standard Functional Interfaces with Lambda Expressions]]

file:../images/java/functional_interface.png

#+begin_src java
// 1. Functional interface
public interface Runnable () {
    void run();
}

// 2. Method that expects an object which implements the functional interface,
//    and invokes its method
public void runThis(final Runnable r) {
    r.run();
}

// 3. Pass lambda expression which implements the functional interface
runThis(() -> System.out.println("Done"));
// void run():                 no param, returns void
// () -> System.out.println(): no param, returns void
#+end_src

* Package
** =import=

#+begin_src java
import foo.Bar; // Import specific class inside package
import foo.*;   // Import all classes inside package
#+end_src

* Module

A module is one or more packages that belong together.

* Command
** =java=

#+begin_src sh
java <options> <class> <arg> ...
    -version
#+end_src

** =javac=

#+begin_src sh
javac <options> <class>.java ...
#+end_src

** =javadoc=

[[https://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html][Java Documentation | Tools | javadoc]]

#+begin_src sh
javadoc <options> <package> ... <src_file> ...

<options>
    -sourcepath <path>:...     # Location(s) of source files
    -classpath <path>:...      # Location(s) of user class files
    -subpackages <package>:... # Subpackages to load recursively

    -public    # Only public classes and members
    -protected # Protected and public classes and members (default)
    -private   # All classes and members

    -d <path>          # Location of output files
    -doclet <class>    # Generate output via alternate doclet
    -docletpath <path> # Location of doclet class files
#+end_src

* Links

1. [[https://docs.oracle.com/javase/tutorial/java/index.html][Oracle | The Java Tutorials]]
