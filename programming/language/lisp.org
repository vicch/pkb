#+setupfile: ../../styles/readtheorg.setup
#+title: LISP

* 语法
运算符
- 前缀表示；
- 可以有任意个参数；
- 可以嵌套；

#+begin_src lisp
(+ 1 2)
(* 1 2 3)
(* (+ 1 3) (+ 2 4))
#+end_src

-----
=define=

#+begin_src lisp
(define <name> <value>)
(define (<name> <param> ...) (<body>))
#+end_src

#+begin_src lisp
(define (square x) (* x x))
#+end_src

-----
=cond=

#+begin_src lisp
(cond (<cond1> <expr1>)
      (<cond2> <expr2>)
      ...
      (else <expr>))
#+end_src

-----
=if=

#+begin_src lisp
(if (<cond>)
    <expr1>
    <expr2>)
#+end_src

-----
逻辑运算

#+begin_src lisp
(and <expr1> ...)
(or <expr1> ...)
(not <expr>)
#+end_src

* 示例
** 数学
*** =n= 次方根

牛顿法
- 通过 =x= 的 =n= 次平方根猜测值 =y= ，可以获得更好的猜测值 =(x / (y^(n-1)) + (n-1) * y) / n= ；
- 通过一个初始猜测值，递归计算直到精确度达到一定要求；

精度要求一：猜测值的 =n= 次方与 =x= 差的绝对值。
#+begin_src lisp
(define (nrt x n)
  (nrt-iter 1 0 x n)
)
(define (nrt-iter guess oldguess x n)
  (if (good-enough guess x n)
      guess
      (nrt-iter (improve guess x n) guess x n)
  )
)
(define (good-enough guess x n)
  (< (abs (- (power guess n) x)) 0.000000001)
)
(define (improve guess x n)
  (/ (+ (/ x (power guess (- n 1))) (* guess (- n 1))) n)
)
(define (power x y)
  (if (= y 1)
      x
      (* x (power x (- y 1)))
  )
)
#+end_src

精度要求二：新的猜测值与旧的猜测值的变化率。
#+begin_src lisp
(define (nrt x n)
  (nrt-iter 1 0 x n)
)
(define (nrt-iter guess oldguess x n)
  (if (good-enough guess oldguess)
      guess
      (nrt-iter (improve guess x n) guess x n)
  )
)
(define (good-enough guess oldguess)
  (< (/ (abs (- guess oldguess)) oldguess) 0.000000001)
)
(define (improve guess x n)
  (/ (+ (/ x (power guess (- n 1))) (* guess (- n 1))) n)
)
(define (power x y)
  (if (= y 1)
      x
      (* x (power x (- y 1)))
  )
)
#+end_src

* 练习
** 数学

返回三个数中最大两个数的和。
#+begin_src lisp
(define (add_two_big a b c)
  (cond
    ((and (>= a c) (>= b c))
      (+ a b))
    ((and (>= a b) (>= c b))
      (+ a c))
    (else
      (+ b c))
  )
)

(define (get_min a b)
  (if (>= a b)
      (b)
      a
  )
)
(define (get_multi_min a b c)
  (get_min (get_min a b) c)
)
(define (add_two_big a b c)
  (- (+ a b c) (get_multi_min a b c))
)
(add_two_big 1 2 3)
#+end_src

-----

计算 Pascal 三角形（杨辉三角）中的数值。
#+begin_src lisp
(define (pascal x y)
  (cond ((= y 1) 1)
        ((= x y) 1)
        (else (+
          (pascal (- x 1) (- y 1))
          (pascal (- x 1) y)))
  )
)
#+end_src

-----

求幂（连续平方迭代法）。
#+begin_src lisp
(define (fast-expt base power)
  (fast-expt-iter base power 1 ))
(define (fast-expt-iter base power product)
  (cond ((= power 0) product)
        (else (if (even? power)
                  (fast-expt-iter (sqr base) (/ power 2) product)
                  (fast-expt-iter base (- power 1) (* product base))
        ))
  )
)
(define (even? n)
  (= (floor (/ n 2)) (/ n 2)))
(define (sqr n)
  (* n n))
#+end_src
