#+SETUPFILE: ../../styles/readtheorg.setup
#+TITLE: C Snippet

* 数据结构

#+CAPTION: 堆栈
#+begin_src c
#define MAXVAL 100 // Max depth of stack

int sp = 0;         // Next free stack position
double val[MAXVAL]; // Stack

void push(double f)
{
    if (sp < MAXVAL)
        val[sp++] = f;
    else
        printf("error: stack full, can't push %g\n", f);
}

double pop(void)
{
    if (sp > 0)
        return val[--sp];
    else {
        printf("error: stack empty\n");
        return 0.0;
    }
}
#+end_src

* 算法
** 二分查找

#+begin_src c
int binarySearch(int x, int v[], int n)
{
    int l = 0, r = n - 1, m;
    while (l <= r) {
        m = (l + r) / 2;
        if (x < v[m])
            r = m - 1;
        else if (x > v[m])
            l = m + 1;
        else
            return m;
    }
    return -1;
}
#+end_src

** 快速排序

#+begin_src c
void swap(int v[], int i, int j);

void qsort(int v[], int left, int right)
{
    int i, last;

    if (left >= right) // If array contains less than 2 elements
        return;

    // Move pivot to left
    swap(v, left, (left + right) / 2);
    // "last" is separator of lesser/bigger values comparing with pivot
    for (last = left, i = left + 1; i <= right; i++)
        if (v[i] < v[left])
            swap(v, ++last, i);
    // Move pivot back
    swap(v, left, last);

    // Sort recursively
    qsort(v, left, last-1);
    qsort(v, last+1, right);
}

void swap(int v[], int i, int j)
{
    int temp;
    temp = v[i];
    v[i] = v[j];
    v[j] = temp;
}
#+end_src

* 计算

#+CAPTION: 乘方
#+begin_src c
int power(int base, int power)
{
    int i = 1;
    while (power-- > 0)
        i *= base;
    return i;
}
#+end_src

* 文本
** IO

#+CAPTION: 输入字符复制到输出
#+begin_src c
int c;
while ((c = getchar()) != EOF)
    putchar(c);
#+end_src

#+CAPTION: 输入中获取一行，写入字符数组，返回长度
#+begin_src c
int getline(char s[], int lim) // 因为不确定输入的长度，需要设置溢出检查
{
    int c, i;
    for (i = 0; i < lim-1 && (c = getchar()) != EOF && c != '\n'; ++i)
        s[i] = c;
    if (c == '\n')
        s[i++] = c;
    s[i] = '\0';
    return i;
}
#+end_src

#+CAPTION: 字符缓冲，支持将暂时不读取的字符退回
#+begin_src c
#define BUFSIZE 100

char buf[BUFSIZE];
int bufp = 0; // 缓冲数组的下一个可用位置

int getch(void)
{
    // 缓冲为空时通过 getchar() 读取字符
    return (bufp > 0) ? buf[--bufp] : getchar();
}

void ungetch(int c)
{
    if (bufp >= BUFSIZE)
        printf("ungetch: too many characters\n");
    else
        buf[bufp++] = c;
}
#+end_src

#+CAPTION: 十进制数按位输出（递归）
#+begin_src c
void printd(int n)
{
    if (n < 0) {
        putchar('-');
        n = -n;
    }
    if (n / 10)
        printd(n / 10);
    putchar(n % 10 + '0');
}
#+end_src

** 统计

#+CAPTION: 返回字符串长度
#+begin_src c
// 写法 1
int strlen(char* s)
{
    int i;
    for (i = 0; *s != '\0'; i++, s++);
    return i;
}
// 写法 2
int strlen(char* s)
{
    char* p = s;
    while (*p != '\0')
        p++;
    return p - s;
}
#+end_src

#+CAPTION: 统计输入字符数
#+begin_src c
int nc;
for (nc = 0; getchar() != EOF; ++nc);
#+end_src

#+CAPTION: 统计输入行数
#+begin_src c
int c, nl = 0;
while ((c = getchar()) != EOF)
    if (c == '\n') nl++;
#+end_src

#+CAPTION: 统计行数、单词数、字符数
#+begin_src c
#define IN  1 // 单词内
#define OUT 0 // 单词外

int c, nl, nw, nc, state;
nc = nl = nw = 0;
state = OUT;
while ((c = getchar()) != EOF) {
    ++nc;
    if (c == '\n')
        ++nl;
    if (c == ' ' || c == '\n' || c == '\t')
        state = OUT;
    else if (state == OUT) {
        state = IN;
        ++nw;
    }
}
#+end_src

** 转换

#+CAPTION: 字符串转换为整数
#+begin_src c
int atoi(char s[])
{
    int i, n, sign;

    // Skip whitespace
    for (i = 0; isspace(s[i]); i++);

    // Get sign and skip sign
    sign = (s[i] == '-') ? -1 : 1;
    if (s[i] == '+' || s[i] == '-')
        i++;

    for (n = 0; isdigit(s[i]); i++)
        n = 10 * n + (s[i] - '0');

    return sign * n;
}
#+end_src

#+CAPTION: 整数转换为字符串
#+begin_src c
void itoa(int n, char s[])
{
    int i = 0, sign = n;
    if (sign < 0)
        n = -n;
    for (; n > 0; n /= 10)
        s[i++] = n % 10 + '0';
    if (sign < 0)
        s[i++] = '-';
    s[i] = '\0';
    reverse(s); // 倒序
}
#+end_src

#+CAPTION: 字符串转换为浮点数
#+begin_src c
double atof(char s[])
{
    double val, power;
    int i, sign;

    // Skip whitespace
    for (i = 0; isspace(s[i]); i++);

    // Get sign and skip sign
    sign = (s[i] == '-') ? -1 : 1;
    if (s[i] == '+' || s[i] == '-') i++;

    for (val = 0.0; isdigit(s[i]); i++)
        val = 10.0 * val + (s[i] - '0');

    // Skip decimal point
    if (s[i] == '.') i++;

    for (power = 1.0; isdigit(s[i]); i++) {
        val = 10.0 * val + (s[i] - '0');
        power *= 10;
    }

    return sign * val / power;
}
#+end_src

** 操作

#+CAPTION: 复制字符串
#+begin_src c
// 指针形式 1
void copy(char* t, char* f)
{
    for (; (*t = *f) != '\0'; t++, f++);
}
// 指针形式 2
void copy(char* t, char* f)
{
    while (*t++ = *f++);
}
// 下标形式
void copy(char* t, char* f)
{
    int i;
    for (i = 0; (t[i] = f[i]) != '\0'; i++);
}
#+end_src

#+CAPTION: 字符串倒序
#+begin_src c
void reverse(char* s)
{
    int i, j, tmp;
    for (i = 0, j = strlen(s) - 1; i < j; i++, j--)
        tmp = s[i], s[i] = s[j], s[j] = tmp;
}
#+end_src

#+CAPTION: 删除末尾的空白字符
#+begin_src c
int trim(char s[])
{
    int n;
    for (n = strlen(s)-1; n >= 0; n--)
        if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
            break; // 从后向前找到第一个非空白字符
    s[n+1] = '\0'; // 将之后的内容截断
    return n;
}
#+end_src

** 查找

#+CAPTION: 查找子字符串，返回起始位置
#+begin_src c
int strindex(char s[], char t[])
{
    int i, j, k;
    for (i = 0; s[i] != '\0'; i++) {
        for (j=i, k=0; t[k] != '\0' && s[j] == t[k]; j++, k++);
        if (k > 0 && t[k] == '\0')
            return i;
    }
    return -1;
}
#+end_src

** 比较

#+begin_src c
// 指针形式
int strcmp(char *s, char *t)
{
    for (; *s == *t; s++, t++)
        if (*s == '\0')
            return 0;
    return *s - *t;
}
// 下标形式
int strcmp(char *s, char *t)
{
    int i;
    for (i = 0; s[i] == t[i]; i++)
        if (s[i] == '\0')
            return 0;
    return s[i] - t[i];
}
#+end_src

* 位运算

#+CAPTION: 计数二进制位中 =1= 的个数
#+begin_src c
int bitcount(unsigned x)
{
    int b = 0;
    for (; x != 0; x >>= 1)
        if (x & 01) b++;
    return b;
}
#+end_src

#+CAPTION: 从比特位 =p= （索引值，最右一位为 =0=）开始取 =n= 位
#+begin_src c
unsigned getbits(unsigned x, int p, int n)
{
    return (x >> (p+1-n)) & ~(~0 << n);
}
#+end_src

* 日期

#+CAPTION: 输入年月日，计算该日期是当年的第几天
#+begin_src c
static int monthDays[2][13] = {
    {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
    {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};
int dayOfYear(int year, int month, int day)
{
    int i, leap;
    leap = (year%4 == 0 && year%100 != 0 || year%400 == 0);
    for (i = 1; i < month; i++)
        day += monthDays[leap][i];
    return day;
}
#+end_src

#+CAPTION: 输入年和当年的第几天，计算月和日
#+begin_src c
static int monthDays[2][13] = {
    {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
    {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};
void monthDay(int year, int nthDay, int* month, int* day)
{
    int i, leap;
    leap = (year%4 == 0 && year%100 != 0 || year%400 == 0);
    for (i = 1; nthDay > monthDays[leap][i]; i++)
        nthDay -= monthDays[leap][i];
    *month = i;
    *day = nthDay;
}
#+end_src

* 命令行

#+CAPTION: 读取命令行参数
#+begin_src c
int main(int argc, char* argv[])
{
    int c, optionA = 0, optionB = 0;

    while (--argc > 0 && (*++argv)[0] == '-') {
        // Options can be combined: -ab
        while (c = *++argv[0]) {
            switch (c) {
                case 'a':
                    optionA = 1;
                    break;
                case 'b':
                    optionB = 1;
                    break;
                default:
                    // Error
                    break;
            }
        }
    }
    ...
}
#+end_src
