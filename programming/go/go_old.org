#+setupfile: ../../styles/readtheorg.setup
#+title: Go

* 函数
** 函数作参数

#+caption: 示例
#+begin_src go
func compute(fn func(int, int) int) int {
    return fn(3, 4)
}

func main() {
    hypot := func(x, y int) int {
        return math.Sqrt(x * x + y * y)
    }
    fmt.Println(compute(hypot))    // 5
    fmt.Println(compute(math.Pow)) // 81
}
#+end_src

** 函数作返回值

匿名函数，形成闭包。

#+caption: 示例
#+begin_src go
func seq() func() int {
    i := 0
    return func() int {
        i += 1
        return i
    }
}

next := seq()
a := next() // 1
b := next() // 2

// 每个闭包维护各自的变量值
next2 := seq()
c := next2() // 1
#+end_src

#+caption: 示例
#+begin_src go
func adder() func(int) int {
    sum := 0
    return func(x int) int {
        sum += x
        return sum
    }
}

func main() {
    pos, neg := adder(), adder()
    for i := 0; i < 10; i++ {
        fmt.Println(pos(i), neg(-i))
    }
}

// 0 0
// 1 -1
// 3 -3
// ...
#+end_src

* 方法
** 接口

- 接口是一组方法的签名。
- 接口中声明的方法签名必须被用于不同 receiver 的方法实现。

#+begin_src go
type <name> interface {
    <method>() <type>
    ...
}
#+end_src

*** 示例

#+begin_src go
type Abser interface { // 接口
    Abs() float64      // 方法签名
}

type MyFloat1 float64
type MyFloat2 float64 // 未实现 Abser 接口
type Vertex struct {
    X, Y float64
}

func (f MyFloat1) Abs() float64 {
    if f < 0 {
        return float64(-f)
    } else {
        return float64(f)
    }
}

func (v *Vertex) Abs() float64 {
    return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

func main() {
    var a Abser

    a = MyFloat1(-math.Sqrt2)
    fmt.Println(a.Abs()) // 1.41421...

    a = MyFloat2(-math.Sqrt2)
    fmt.Println(a.Abs()) // Error: MyFloat2 没有实现 Abs 方法

    a = &Vertex{3, 4}
    fmt.Println(a.Abs()) // 5
}
#+end_src

*** =nil=

#+begin_src go
type Foo interface {
    Method()
}

type Bar struct {
    Str string
}

func (t *Bar) Method() {
    if t == nil {
        fmt.Println("<nil>")
    } else {
        fmt.Println(t.Str)
    }
}

func main() {
    var a Foo  // value = <nil>, type = <nil>
    a.Method() // Runtime error: nil pointer
               // 接口值和类型都为 nil，无法得知应该调用的方法

    var b *Bar
    a = b      // value = <nil>, type = *main.Bar
    a.Method() // <nil> 
               // 接口值为 nil，类型不为 nil

    var c *Bar
    c = &Bar{"Hello"}
    a = c      // value = &{Hello}, type = *main.Bar
    a.Method() // Hello
}
#+end_src

*** 空接口

未定义方法的空接口

