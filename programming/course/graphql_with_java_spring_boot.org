#+setupfile: ../../styles/readtheorg.setup
#+title: GraphQL Application with Java Spring Boot and Netflix DGS

* Setup Project

#1 Go to [[https://start.spring.io/][Spring initializer]] to generate project:

- Project: Gradle
- Spring Boot: 2.6.2?
- Group: =com.course=
- Artifact: =graphql=
- Name: =graphql=
- Pacakage name: =com.course.graphql=
- Java: 8 (because current working env uses Java 1.8)
- Dependencies: Spring Web, Spring Boot DevTools

#2 Open/import project into IntelliJ.

#3 Update Gradle build config.

Add dependencies and build target:

#+caption: =build.gradle=
#+begin_src shell
plugins {
    id 'com.netflix.dgs.codegen' version '5.1.16' // Gradle plugin for generating Java classes from GraphQL Schema
}

dependencies {
    implementation(platform('com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:4.9.15'))
	  implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter'
	  implementation 'com.netflix.graphql.dgs:graphql-dgs-extended-scalars'
}

generateJava {
	  packageName = 'com.course.graphql.generated'
}
#+end_src

Check latest versions:

- [[https://search.maven.org/artifact/com.netflix.graphql.dgs/graphql-dgs-platform-dependencies][com.netflix.graphql.dgs:graphql-dgs-platform-dependencies]]
- [[https://plugins.gradle.org/plugin/com.netflix.dgs.codegen][com.netflix.dgs.codegen]]

Click "Load Gradle Changes".

#4 DGS looks for schema files under =resource/schema=, which can be changed:

#+caption: =resources/application.yml=
#+begin_src yaml
dgs:
  graphql:
    schema-locations:
      - classpath*:schema/**/*.graphql* // Relative to src/main/resources?
#+end_src

#5 Start local server by right click on =GraphqlApplication= > Run. Confirm GraphiQL is available at http://localhost:8080/graphiql

* Hello World

#1 Add schema file:

#+caption: =resources/schema/hello.graphql=
#+begin_src graphql
type Hello {
    text: String!
    number: Int
}

// Root query
type Query {
    all: [Hello]
    single: Hello
}
#+end_src

#2 Rebuild project/module. Confirm corresponding Java classes are generated by codegen plugin under =build/generated/sources/dgs-codegen=.

#3 Try query via GraphiQL:

#+begin_src text
{
  all {
    text
    number
  }
}
#+end_src

Which should return empty data, as there is no data resolver.

#4 Implement a resolver with hardcoded data:

#+caption: =java/com/source/graphql/resolver/HelloResolver.java=
#+begin_src java
@DgsComponent // Annotation for classes related to DGS framework
public class HelloResolver {
    @DgsQuery // Annotation for DGS query resolver methods
    public List<Hello> all() {
        return ImmutableList.of(
                new Hello("Hello", 123),
                new Hello("World", 456));
    }
}
#+end_src

#5 Re-run the application and confirm the query returns hardcoded data.

* Nest Data

#1 Add schema and query type:

#+caption: =resources/schema/bookstore.graphql=
#+begin_src graphql
type Book {
    title: String!
    author: Author!
}
type Author {
    name: String!
}
#+end_src

#+caption: =resources/schema/query.graphql=
#+begin_src graphql
type Query {
    books(author: String): [Book]
}
#+end_src

#2 Implement mock data store:

#+caption: =java/com/course/graphql/datastore/BookstoreData.java=
#+begin_src java
public static List<Book> load() {
    final List<Author> authors = ImmutableList.of(
            new Author("Foo"), ...);
    return ImmutableList.of(
            new Book("One", authors.get(0)), // Can also use Book.newBuilder().title()...build(); syntax
            ...);
}
#+end_src


#3 Implement GraphQL resolver:

#+caption: =java/com/course/graphql/resolver/BookstoreResolver.java=
#+begin_src java
@DgsData(parentType = "Query", field = "books") // Use @DgsData when method name doesn't match query name (in schema)
public List<Book> booksByAuthorName(
        @InputArgument(name = "author") Optional<String> authorName) { // Use @InputArgument to map query param to method arg
    return authorName.map(
            s -> BookstoreData.load().stream()
                    .filter(book -> book.getAuthor().getName().equals(s)) // Filter books by author name
                    .collect(Collectors.toList()))
            .orElseGet(BookstoreData::load);
}
#+end_src
